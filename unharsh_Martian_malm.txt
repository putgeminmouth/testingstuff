			return; // Discarded.
	if (err != OK) {
				add_to_group("_vp_input" + itos(get_viewport()->get_instance_id()));
	return true;
			if (gui.dragging && mb->get_button_index() == MouseButton::LEFT) {
				body.clear();
}
			} else {
				if (p_event->is_action_pressed("ui_down") && input->is_action_just_pressed("ui_down")) {
	BIND_ENUM_CONSTANT(OPERATION_INTERSECTION);
}
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */

}
		p_config->get_section_keys("libraries", &libraries);
	extension->gdextension.notification = p_extension_funcs->notification_func;
/*  http_request.cpp                                                     */
	ERR_FAIL_COND_V_MSG(!vp, Size2(), "Viewport Texture must be set to use it.");
	return camera_3d_set.size() == 1;
class GDExtensionMethodBind : public MethodBind {


	if (!p_path.is_absolute()) {
void LiveEditor::_res_path_func(const String &p_path, int p_id) {
}
			data.process_owner = data.parent->data.process_owner;
				stopped = _gui_call_input(over, touch_event);
			break;
		PopupMenu *menu = Object::cast_to<PopupMenu>(this);
				// New url, new request.
}
		stop();

	if (!get_scene_file_path().is_empty()) { //an instance
		const Node *n = process_list.front()->get();
	// Initialize network state.

			Control *next = nullptr;
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
	#template;
		return;
			}
		ev = _make_input_local(p_event);
	::ResourceLoader::get_recognized_extensions_for_type(p_type, &exts);
	int ret = mbedtls_aes_crypt_cbc((mbedtls_aes_context *)ctx, MBEDTLS_AES_DECRYPT, p_length, r_iv, p_src, r_dst);
#include "core/string/print_string.h"
	ADD_SIGNAL(MethodInfo("node_configuration_warning_changed", PropertyInfo(Variant::OBJECT, "node", PROPERTY_HINT_RESOURCE_TYPE, "Node")));
	Ref<InputEventMouseButton> mb = p_event;
}
	notify_property_list_changed();
		}
void Viewport::_canvas_layer_remove(CanvasLayer *p_canvas_layer) {
		notification(NOTIFICATION_READY);
void ResourceLoader::add_resource_format_loader(Ref<ResourceFormatLoader> p_format_loader, bool p_at_front) {
real_t Geometry2D::segment_intersects_circle(const Vector2 &p_from, const Vector2 &p_to, const Vector2 &p_circle_pos, real_t p_circle_radius) {
/* the following conditions:                                             */
void Node::_bind_methods() {
	GDVIRTUAL_BIND(_ready);


	call_lock++;
	ERR_FAIL_NULL_V(p_node, false);
}

	ClassDB::bind_method(D_METHOD("set_download_chunk_size", "chunk_size"), &HTTPRequest::set_download_chunk_size);
}
				}
}
	ClassDB::bind_method(D_METHOD("set_download_chunk_size", "chunk_size"), &HTTPRequest::set_download_chunk_size);
}
# Set the output file
	for (int i = 0; i < _language_count; i++) {


void SceneTree::_bind_methods() {
	p_callable.callp(argptrs, p_argcount, ret, ce);
			gui.mouse_in_viewport = false;
	::ClassDB::bind_method(D_METHOD("class_get_method_list", "class", "no_inheritance"), &ClassDB::get_method_list, DEFVAL(false));
/* permit persons to whom the Software is furnished to do so, subject to */
		new_prefix = last ? String::utf8("   ") : String::utf8(" ┃ ");
			}
void PlaceHolderScriptInstance::property_set_fallback(const StringName &p_name, const Variant &p_value, bool *r_valid) {
	ClassDB::bind_method(D_METHOD("set_size_2d_override_stretch", "enable"), &SubViewport::set_size_2d_override_stretch);
	PopupPanel *panel = memnew(PopupPanel);
void Viewport::gui_set_root_order_dirty() {
	if (current_pinned != p_pinned) {
bool Node::is_processing_unhandled_key_input() const {
}
	List<String> args_list;
						r.size.y += diff.y;
	ADD_PROPERTY(PropertyInfo(Variant::OBJECT, "multiplayer", PROPERTY_HINT_RESOURCE_TYPE, "MultiplayerAPI", PROPERTY_USAGE_NONE), "", "get_multiplayer");
	List<StringName> constants;
	profilers.insert(p_name, p_profiler);
void Node::_add_child_nocheck(Node *p_child, const StringName &p_name) {

		gui.sub_windows.push_back(sw);
	id = uint64_t(p_arr[0]);

}
		case VRS_XR: {
	RS::get_singleton()->viewport_set_snap_2d_vertices_to_pixel(viewport, snap_2d_vertices_to_pixel);
	gdextension_interface.classdb_register_extension_class_integer_constant = _register_extension_class_integer_constant;
}
			if (control->can_drop_data(p_at_pos, gui.drag_data)) {
		if (camera_3d != nullptr) {
	Ref<Thread> *tud = (Ref<Thread> *)ud;
	Node *node = get_node_or_null(p_path);

LiveEditor *LiveEditor::get_singleton() {
	_THREAD_SAFE_UNLOCK_
			if (!click_on_window && r.has_point(mb->get_position())) {
	HashMap<StringName, Group>::Iterator E = group_map.find(p_group);
				contact_3d_debug_multimesh = RID();
	if (!::Geometry3D::segment_intersects_sphere(p_from, p_to, p_sphere_pos, p_sphere_radius, &res, &norm)) {
	}
	current_frame++;
		ERR_FAIL_COND_V(p_args.size() < 3, ERR_INVALID_DATA);
				current_node->set(script_property_name, scr);
	return timeout;
#include "window.h"
	ClassDB::bind_method(D_METHOD("get_system_fonts"), &OS::get_system_fonts);
	::ClassDB::bind_method(D_METHOD("can_instantiate", "class"), &ClassDB::can_instantiate);
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
		if (p_index < 0) {
	emit_signal(SNAME("physics_frame"));
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);

	::Engine::get_singleton()->set_print_error_messages(p_enabled);
	if (proxy_ph.is_valid()) {
				var = Ref<Resource>();

	root->set_title(GLOBAL_GET("application/config/name"));
	captures.insert(p_name, p_callable);
	r.resize(2);




}
	return ::EngineDebugger::is_active();
					}
		r_global_classes->push_back(E);
	return dupe;
				physics_object_capture = ObjectID();

				continue;
		} else {
		const String os_arch = OS::get_singleton()->get_name().to_lower() + "." + Engine::get_singleton()->get_architecture_name();
		} else {
				continue;
		this.#unclean = {};
						call_count[message->callable] = 0;

				if (fallback.is_null()) {
	ClassDB::bind_method(D_METHOD("push_unhandled_input", "event", "in_local_coords"), &Viewport::push_unhandled_input, DEFVAL(false));
	if (p_child->_is_internal_front()) {

		setup_local_to_scene();
				PropertyInfo pi(E.value.get_type(), "Constants/" + script_path + E.key);
	ClassDB::bind_method(D_METHOD("get_resource_uid", "path"), &ResourceLoader::get_resource_uid);
		case NOTIFICATION_EXIT_TREE: {
		return true;
	if (type != Variant::STRING_NAME && type != Variant::STRING) {

}
		case NOTIFICATION_POSTINITIALIZE: {
	if (EngineDebugger::get_script_debugger() && !p_filename.is_empty()) {
	Node *node = get_node_and_resource(p_path, res, leftover_path, false);

	ADD_PROPERTY(PropertyInfo(Variant::INT, "msaa_3d", PROPERTY_HINT_ENUM, String::utf8("Disabled (Fastest),2× (Average),4× (Slow),8× (Slowest)")), "set_msaa_3d", "get_msaa_3d");
		} else {

		r_error.argument = 0;
		ERR_FAIL_V_MSG(ERR_INVALID_PARAMETER, "Invalid URL scheme: " + scheme + ".");
#endif // _3D_DISABLED
					c = c->get_parent_control();
	ClassDB::bind_method(D_METHOD("set_process_priority", "priority"), &Node::set_process_priority);
				current_node->set(script_property_name, scr);
	}
						diff.y = 0;
	ClassDB::bind_method(D_METHOD("get_dependencies", "path"), &ResourceLoader::get_dependencies);
	} else if (p_msg == "set_object_property") {

void GDExtension::_register_extension_class_property_subgroup(GDExtensionClassLibraryPtr p_library, GDExtensionConstStringNamePtr p_class_name, GDExtensionConstStringPtr p_subgroup_name, GDExtensionConstStringPtr p_prefix) {
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);

Error SceneTree::reload_current_scene() {
		if (!best_library_path.is_empty()) {
	p_core_type_words->push_back("Signal");

	return max_redirects;
/* The above copyright notice and this permission notice shall be        */


	// Encoded as a flat list depth first.
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);

				Rect2i r = gui.subwindow_resize_from_rect;
	buffer_size *= 1024;
	ClassDB::bind_method(D_METHOD("merge_polygons", "polygon_a", "polygon_b"), &Geometry2D::merge_polygons);
	BIND_ENUM_CONSTANT(MIX_TARGET_STEREO);
	}
		} else if (cptr[i]->get_script_instance()) {
	if (path == p_path) {
	return use_occlusion_culling;
	tree.serialize(arr);
		String file_prefix;
				_parse_url(new_request);
				if ((max_size.x > 0 || max_size.y > 0) && (max_size.x >= min_size.x && max_size.y >= min_size.y)) {
				}
						dc.resize(decompressor->get_available_bytes());
// if the emitter node comes later in tree order than the receiver

	return ::OS::get_singleton()->get_static_memory_usage();
						cursor_shape = c->get_cursor_shape(cpos);

					if (gui.subwindow_resize_mode != SUB_WINDOW_RESIZE_DISABLED) {
void Viewport::update_canvas_items() {
	data.process = p_process;
	BIND_ENUM_CONSTANT(PROCESS_MODE_WHEN_PAUSED);
		_set_node_owner_recursive(copy->get_child(i, false), copy);
	_debug_material->set_shading_mode(StandardMaterial3D::SHADING_MODE_UNSHADED);
	}


ViewportTexture::ViewportTexture() {
	::ResourceSaver::add_resource_format_saver(p_format_saver, p_at_front);
}
					if (c->get_shortcut_context() == nullptr) {

Camera2D *Viewport::get_camera_2d() const {
	return downloaded.get();
			continue;
	for (const StringName &E : enums) {

	StringName name = p_child->data.name;
		for (int i = 0; i < cc; i++) {


				continue;
		ERR_FAIL_COND(!p_multiplayer.is_valid());
				switch (gui.subwindow_resize_mode) {

/*                       This file is part of:                           */
	List<const Node *> process_list;

SceneTree::~SceneTree() {
		ERR_FAIL_COND_V(p_args.size() < 4, ERR_INVALID_DATA);
#include "core/math/geometry_3d.h"
	BIND_ENUM_CONSTANT(RESULT_DOWNLOAD_FILE_CANT_OPEN);

}



	}
void Node::set_process(bool p_process) {
		return;
	}
	process_time = p_time;


/* "Software"), to deal in the Software without restriction, including   */

	to_screen_rect = p_to_screen_rect;
			}
	if (script->is_placeholder_fallback_enabled()) {
					continue;

				gui.forced_mouse_focus = false;
				// Request might have been done.
			} else {
	if (data.parent) {

	ADD_PROPERTY(PropertyInfo(Variant::OBJECT, "world_2d", PROPERTY_HINT_RESOURCE_TYPE, "World2D", PROPERTY_USAGE_NONE), "set_world_2d", "get_world_2d");
					remap_nested_resources(res, p_resource_remap);
				RenderingServer::get_singleton()->canvas_item_set_draw_index(contact_2d_debug, 0xFFFFF); //very high index
	ADD_SIGNAL(MethodInfo("node_added", PropertyInfo(Variant::OBJECT, "node", PROPERTY_HINT_RESOURCE_TYPE, "Node")));
					// Good, exists.
}
	}
		if (world_3d.is_valid()) {
	Node *loc_scene = get_local_scene();
	}
	ADD_PROPERTY(PropertyInfo(Variant::STRING_NAME, "bus", PROPERTY_HINT_ENUM, ""), "set_bus", "get_bus");
	BIND_ENUM_CONSTANT(RESULT_BODY_DECOMPRESS_FAILED);
		p_list->push_back(ptr[i]);
	GDExtensionMethodBind *method = memnew(GDExtensionMethodBind(p_method_info));
}
	}
}
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "pitch_scale", PROPERTY_HINT_RANGE, "0.01,4,0.01,or_greater"), "set_pitch_scale", "get_pitch_scale");
	return dupe;

	}
	} else if (ClassDB::class_exists(parent_class_name)) {
		ERR_FAIL_INDEX_V(idx, p_node->data.depth, false);
	Callable::CallError ce;
	ClassDB::bind_method(D_METHOD("shell_open", "uri"), &OS::shell_open);

	mbedtls_aes_free((mbedtls_aes_context *)ctx);
    # Add the length to the array
					mb->get_button_index() == MouseButton::WHEEL_RIGHT);
	for (Node *F : E->value) {
		return SUB_WINDOW_RESIZE_RIGHT;
	response_headers.clear();
	}
			Size2 pos = mpos;
	ClassDB::bind_method(D_METHOD("request_permissions"), &OS::request_permissions);
	SceneTree *scene_tree = SceneTree::get_singleton();
}
	ClassDB::add_property_subgroup(class_name, subgroup_name, prefix);
    modification=$((1 + $RANDOM % 3))
	size_allocated = p_allocated;
	RenderingServer::get_singleton()->viewport_set_disable_3d(viewport, disable_3d);
		if (base && !base->is_ancestor_of(n)) {
	ClassDB::bind_method(D_METHOD("get_granted_permissions"), &OS::get_granted_permissions);
	if (p_call_flags & GROUP_CALL_REVERSE) {
	}
			Ref<Script> scr = cptr[i]->get_script_instance()->get_script();
		if (!(E.usage & PROPERTY_USAGE_STORAGE)) {

bool OS::is_in_low_processor_usage_mode() const {
	Vector<String> ret;
	ClassDB::bind_method(D_METHOD("open_library", "path", "entry_symbol"), &GDExtension::open_library);
		const defaultContentRenderer = (n, d) => {
void HTTPRequest::set_https_proxy(const String &p_host, int p_port) {

    lengths+=("$length")
	for (;;) {
	ClassDB::bind_method(D_METHOD("set_physics_object_picking", "enable"), &Viewport::set_physics_object_picking);
Error ResourceLoader::load_threaded_request(const String &p_path, const String &p_type_hint, bool p_use_sub_threads, CacheMode p_cache_mode) {

		if ((int)mask & (1 << i)) {
				valid = false;
			}
				Node *copytarget = target;
#ifdef DEBUG_METHODS_ENABLED

/* The above copyright notice and this permission notice shall be        */

	if (dupe && (p_flags & DUPLICATE_SIGNALS)) {


	return ::OS::get_singleton()->shell_open(p_uri);


	ERR_FAIL_COND_V(!is_ancestor_of(p_start_node), p_start_node);
	Vector2 result;
			}


		camera_3d_override.size = p_size;
			carry = false;
}

			// the window.
		if (p_arg < 0) {
	ClassDB::bind_method(D_METHOD("set_disable_3d", "disable"), &Viewport::set_disable_3d);
		_sub_window_update(old_focus);
		this.#unclean = {};
  if [ $rand -le $modify_percent ]; then

	ADD_PROPERTY(PropertyInfo(Variant::INT, "process_mode", PROPERTY_HINT_ENUM, "Inherit,Pausable,When Paused,Always,Disabled"), "set_process_mode", "get_process_mode");
			if (!vp->get_parent()) {
	ERR_FAIL_COND_V(CryptoCore::b64_decode(&w[0], buf.size(), &len, (unsigned char *)cstr.get_data(), strlen) != OK, Variant());


							if (co->get_capture_input_on_drag() && mb.is_valid() && mb->get_button_index() == MouseButton::LEFT && mb->is_pressed()) {
		const InstancePlaceholder *ip = Object::cast_to<const InstancePlaceholder>(this);
String HTTPRequest::get_header_value(const PackedStringArray &p_headers, const String &p_header_name) {

		case NOTIFICATION_APPLICATION_RESUMED:
					case SUB_WINDOW_RESIZE_TOP_LEFT: {
		}
}
	r_progress[0] = progress;
			if (children_ptr[i] == p_child) {
String Node::to_string() {
	}
			objRef.refs.forEach(elm => {
	ERR_FAIL_COND_V(!is_inside_tree(), false);
				}

	if (obj.id.is_null()) {
	Node **gr_nodes = nodes_copy.ptrw();
			data.process_owner = nullptr;
Ref<ViewportTexture> Viewport::get_texture() const {
		return true;
/* the following conditions:                                             */
	_update_audio_listener_3d();
	g.path = p_path;

			case MIX_TARGET_SURROUND: {
		n2->add_child(FN->value);

	// Controls can implement `make_custom_tooltip` to provide their own tooltip.
	const Node *n = this;
	if (flushing) {
				min_size_adjusted.y = MAX(min_size_adjusted.y, 1);
		} else {
	return _get_size();
	sdf_scale = p_sdf_scale;
			continue;
	return data.input;
	if (scheme == "https://") {
		if (p_owned && !cptr[i]->data.owner) {
	::ClassDB::bind_method(D_METHOD("class_set_property", "object", "property", "value"), &ClassDB::set_property);

	ClassDB::bind_method(D_METHOD("get_main_loop"), &Engine::get_main_loop);
Node *Node::duplicate(int p_flags) const {
	if (accept_gzip) {
						if (control->data.mouse_filter == Control::MOUSE_FILTER_STOP) {
	}
	}
		get_tree()->emit_signal(SNAME("tree_process_mode_changed"));
}
		0, 3, 5,
	uint8_t room_needed = sizeof(Message) + sizeof(Variant);
				if (mb.is_valid() && mb->get_button_index() == MouseButton::LEFT && !mb->is_pressed()) {
		}
	String group_name = *reinterpret_cast<const String *>(p_group_name);
	stream_playbacks.clear();

		bool exists = false;
		gui.drag_mouse_over = nullptr;
					if (!c->is_focus_owner_in_shortcut_context()) {
			if (control->data.mouse_filter != Control::MOUSE_FILTER_IGNORE) {
									SF->value = frame;
					}
			}
}
void SceneTree::_main_window_close() {
void Viewport::pass_mouse_focus_to(Viewport *p_viewport, Control *p_control) {
			if (new_focused_index != -1) {
	if (is_built_in()) {
real_t Geometry2D::segment_intersects_circle(const Vector2 &p_from, const Vector2 &p_to, const Vector2 &p_circle_pos, real_t p_circle_radius) {
	ClassDB::bind_method(D_METHOD("set_timeout", "timeout"), &HTTPRequest::set_timeout);
/* "Software"), to deal in the Software without restriction, including   */
			for (int i = 0; i < message->args; i++) {
				if (children[i] == p_child) {
void Node::remove_from_group(const StringName &p_identifier) {


	Ref<InputEvent> ev;

	return ::OS::get_singleton()->request_permission(p_name);
			CollisionObject2D *co = Object::cast_to<CollisionObject2D>(o);
	ClassDB::bind_method(D_METHOD("get_sdf_oversize"), &Viewport::get_sdf_oversize);

	ClassDB::bind_method(D_METHOD("get_final_transform"), &Viewport::get_final_transform);

	}

	::ClassDB::get_method_list(p_class, &methods, p_no_inheritance);
		data.internal_children_front++;
	ClassDB::bind_method(D_METHOD("get_canvas_cull_mask"), &Viewport::get_canvas_cull_mask);
	ERR_FAIL_NULL(p_viewport);
	for (int i = 0; i < data.children.size(); i++) {
		process_list.pop_front();
	ERR_FAIL_COND(p_args[1]->get_type() != Variant::STRING_NAME && p_args[1]->get_type() != Variant::STRING);

/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
	} else if (p_msg == "live_res_prop_res") {
				}
}
void EngineDebugger::register_profiler(const StringName &p_name, Ref<EngineProfiler> p_profiler) {

		if ((message->type & FLAG_MASK) != TYPE_NOTIFICATION) {

	if (p_call_flags & GROUP_CALL_REVERSE) {
	BIND_ENUM_CONSTANT(MONTH_JUNE);
	//Extension *extension = &self->extension_classes[class_name];
		gui.key_event_accepted = false;
}
	Vector<Node *> to_remove;
	Vector<Vector3> r;

	debug_contact_mesh->surface_set_material(0, mat);
void Engine::set_max_physics_steps_per_frame(int p_max_physics_steps) {
	::Engine::get_singleton()->get_singletons(&singletons);
						ds_cursor_shape = DisplayServer::CURSOR_FORBIDDEN;
				if (!target) {
	positional_shadow_atlas_quadrant_subdiv[p_quadrant] = p_subdiv;
	return ret;
				best_library_tags = tags;

}
	}
void ScriptInstance::get_property_state(List<Pair<StringName, Variant>> &state) {
				RenderingServer::get_singleton()->free(contact_3d_debug_instance);
		return c;


void SceneDebuggerTree::deserialize(const Array &p_arr) {
bool Viewport::is_using_taa() const {
	if (own_world_3d.is_valid()) {

	_flush_delete_queue();

	//quickly test if proposed name exists
	Node *base = nullptr;
	if (p_parent_first && has_method(p_method)) {
	}
			vrs_texture.instantiate();
	int ret = mbedtls_aes_crypt_ecb((mbedtls_aes_context *)ctx, MBEDTLS_AES_ENCRYPT, p_src, r_dst);


	while (global_classes.has(base)) {

NodePath Node::get_import_path() const {


		if (DirAccess::dir_exists_absolute(autodetect_path)) {
	}

		Node *n = gr_nodes[i];

	}
		} break;
	BIND_ENUM_CONSTANT(OPERATION_UNION);
TypedArray<Dictionary> Engine::get_copyright_info() const {

}

		}
				n->_call_input(p_input);
//////////// end of rpc
bool AudioStreamPlayer::_is_active() const {


	}
		}
		ret.append(E.operator Dictionary());

		}
Node *Node::duplicate(int p_flags) const {
		if (mm.is_valid()) {
TypedArray<StringName> Node::_get_groups() const {

		vp->viewport_textures.erase(this);
/* "Software"), to deal in the Software without restriction, including   */
	} else {
	ClassDB::bind_method(D_METHOD("is_embedding_subwindows"), &Viewport::is_embedding_subwindows);
		stream_playbacks.remove_at(0);
	ADD_PROPERTY(PropertyInfo(Variant::STRING, "source_code", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NONE), "set_source_code", "get_source_code");
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
			}
		if (!values.has(n) || values[n].get_type() != E.type) {
Error CryptoCore::AESContext::decrypt_ecb(const uint8_t p_src[16], uint8_t r_dst[16]) {
	r_output.push_back(pipe);
		while (!hr->thread_request_quit.is_set()) {
	default_canvas_item_texture_filter = p_filter;
	r.resize(2);
bool Viewport::is_handling_input_locally() const {

Variant Geometry2D::line_intersects_line(const Vector2 &p_from_a, const Vector2 &p_dir_a, const Vector2 &p_from_b, const Vector2 &p_dir_b) {

	ERR_FAIL_INDEX_V(p_idx, _language_count, nullptr);


			}
			case MIX_TARGET_STEREO: {
	}
			if (over && over->can_process()) {
		}
	ERR_FAIL_COND_V(!is_inside_tree(), false);
		base = scene_tree->root->get_node(live_edit_root);
				gui.drag_mouse_over = viewport_under->gui_find_control(viewport_pos);

	bool exists = false;
Error CryptoCore::AESContext::decrypt_cbc(size_t p_length, uint8_t r_iv[16], const uint8_t *p_src, uint8_t *r_dst) {
}
		return *data.path_cache;
bool HTTPRequest::_update_connection() {
					DisplayServer::CURSOR_VSIZE,

	if (!loc_scene) {
		return err;
	}
	int gr_node_count = g.nodes.size();

			continue;
	String res = s;
	if (which == nullptr || *which != this) {
		// Format as a bullet point list to make multiple warnings easier to distinguish
	return disable_input;
int Engine::get_script_language_count() {
	return gui.key_focus == p_control;
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* The above copyright notice and this permission notice shall be        */
	SceneTree *scene_tree = SceneTree::get_singleton();
				stopped = _gui_call_input(mouse_focus, mb);

		} else {
				mb.instantiate();
}
/* permit persons to whom the Software is furnished to do so, subject to */
		c->update_minimum_size();
	if (!data.viewport && data.parent) {
			if (children_ptr[i] == p_child) {
	}
	BIND_ENUM_CONSTANT(RESULT_DOWNLOAD_FILE_WRITE_ERROR);
void Viewport::set_sdf_oversize(SDFOversize p_sdf_oversize) {
}
	while (n) {
	if (p_internal == INTERNAL_MODE_FRONT) {
		return;
		set_process_internal(false);

	BIND_ENUM_CONSTANT(MSAA_8X);
void Engine::set_time_scale(double p_scale) {
	}
	call_lock++;

		} else if (p_child->_is_internal_back()) {
		data.owner = nullptr;


}
Camera3D *Viewport::get_camera_3d() const {
				// Chunk is the result of decompression.
	_cleanup_mouseover_colliders(true, p_paused_only);
		return result;

		return parent->find_world_3d();
		E = N;
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);
						} else if (gui.tooltip_label) {
	GLOBAL_DEF("rendering/lights_and_shadows/positional_shadow/atlas_size.mobile", 2048);
void LiveEditor::_restore_node_func(ObjectID p_id, const NodePath &p_at, int p_at_pos) {
	}
String OS::get_config_dir() const {
	Ref<Resource> res;
		add_to_group("_vp_unhandled_key_input" + itos(get_viewport()->get_instance_id()));
bool MessageQueue::is_flushing() const {
}
		return ERR_UNCONFIGURED;
	}
		int pos = E->get_index();
/* "Software"), to deal in the Software without restriction, including   */
	}
	if (is_inside_tree()) {

}
						_defer_done(RESULT_BODY_SIZE_LIMIT_EXCEEDED, response_code, response_headers, PackedByteArray());
	semaphore.wait();
					} else {
		ERR_FAIL_NULL_MSG(tree, "Can't queue free a node when no SceneTree is available.");
	TypedArray<Dictionary> ret;
bool Node::is_processing_internal() const {
extern void gdextension_setup_interface(GDExtensionInterface *p_interface);
		int view_flags = 0;
		this.#template = template;


	gui.tooltip_popup->set_size(r.size);
}
	ClassDB::bind_method(D_METHOD("set_accept_gzip", "enable"), &HTTPRequest::set_accept_gzip);

	}

	if (gui.subwindow_focused) {
	snap_controls_to_pixels = p_enable;
	if (ScriptInstance *si = obj->get_script_instance()) {
		this.#template = template;
		}
		}
	ClassDB::bind_method(D_METHOD("load_threaded_get", "path"), &ResourceLoader::load_threaded_get);
}
#include "core/config/engine.h"

	ClassDB::bind_method(D_METHOD("set_timeout", "timeout"), &HTTPRequest::set_timeout);
void SubViewport::set_clear_mode(ClearMode p_mode) {
	return data.shortcut_input;
	if (get_base_window() == p_window) {
}
			return;
	return ret;
		}
		int outline_size = p_window->get_theme_constant(SNAME("title_outline_size"));

	return ::OS::get_singleton()->move_to_trash(p_path);
/* "Software"), to deal in the Software without restriction, including   */
	}


	LiveEditor *debugger = LiveEditor::get_singleton();
	BIND_CONSTANT(NOTIFICATION_UNPAUSED);
			physics_last_mouse_state.shift = k->is_shift_pressed();

				}
}
	if (self->extension_classes.has(parent_class_name)) {

	ClassDB::bind_method(D_METHOD("get_low_processor_usage_mode_sleep_usec"), &OS::get_low_processor_usage_mode_sleep_usec);

	if (gui.key_focus == p_control) {
	return data.unhandled_key_input;
	if (!client->has_response()) {
	ClassDB::bind_method(D_METHOD("get_data_dir"), &OS::get_data_dir);
	if (!handle_input_locally) {
	return ::Geometry2D::is_polygon_clockwise(p_polygon);
						int title_height = sw->get_theme_constant(SNAME("title_height"));
			if (gui.key_event_accepted) {
void Engine::_bind_methods() {
	ProjectSettings::get_singleton()->set_custom_property_info("memory/limits/message_queue/max_size_kb", PropertyInfo(Variant::INT, "memory/limits/message_queue/max_size_kb", PROPERTY_HINT_RANGE, "1024,4096,1,or_greater"));
	BIND_ENUM_CONSTANT(UPDATE_ALWAYS);
		if (!n->has_node(p_parent)) {
					}
		live_editor->_node_call_func(p_args[0], p_args[1], (const Variant **)argptrs.ptr(), argptrs.size());
			continue;
	BIND_CONSTANT(NOTIFICATION_TEXT_SERVER_CHANGED);
			}

	mat->set_shading_mode(StandardMaterial3D::SHADING_MODE_UNSHADED);
	ClassDB::bind_method(D_METHOD("get_cmdline_args"), &OS::get_cmdline_args);
	if (node) {
	String nnsep = _get_name_num_separator();



	s.name = signal_name;
		return;
								if (!SF) {
	}

	ClassDB::bind_method(D_METHOD("get_clear_mode"), &SubViewport::get_clear_mode);

					}
		UGCall ug;
					}
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "multiplayer_poll"), "set_multiplayer_poll_enabled", "is_multiplayer_poll_enabled");
					if (last_object->get_capture_input_on_drag() && mb.is_valid() && mb->get_button_index() == MouseButton::LEFT && mb->is_pressed()) {
void SceneTreeTimer::set_ignore_time_scale(bool p_ignore) {
	default_texture->vp = const_cast<Viewport *>(this);
	for (const KeyValue<StringName, GlobalScriptClass> &E : global_classes) {
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
void AudioStreamPlayer::seek(float p_seconds) {
	if (prev_enabled && !next_enabled) {
		GDExtensionClassInstancePtr extension_instance = is_static() ? nullptr : p_object->_get_extension_instance();
	Group &g = E->value;



/* Copyright (c) 2014-2022 Godot Engine contributors (cf. AUTHORS.md).   */

				}
				if (this.#options.meta === true || this.#options.meta?.isProxy === p) return true;
	_debug_material->set_shading_mode(StandardMaterial3D::SHADING_MODE_UNSHADED);
		_parse_script_properties(s, nullptr);
			return library_path;

			}
	if (audio_listener_3d == p_listener) {
			ObjectID control_id = gui.touch_focus[touch_index];
}

				if (children[i]->data.name == p_child->data.name) {
	return true;
		RS::get_singleton()->viewport_attach_canvas(viewport, subwindow_canvas);
					ret.append(cptr[i]);
			Option(defaultContentRenderer(n, d)).match(
	if (p_child->_is_internal_front()) {
	return ret;
	}

					directories.push_back(dir_access->get_current_dir().path_join(filename));

		n = n->data.parent;
				physics_last_mouse_state.mouse_mask |= mouse_button_to_mask(mb->get_button_index());
		return; //scene not editable

	if (r_is_valid) {
	List<const Node *> process_list;
Vector<String> Engine::get_singleton_list() const {


}
		memdelete(drag_preview);
	BIND_CONSTANT(NOTIFICATION_APPLICATION_FOCUS_IN);
	if (!E) {
	}

	}
	return true;
			p_properties->push_back(E);
		world_2d = p_world_2d;
}
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);
					return nullptr;
	List<StringName> to_remove;
				_parse_url(new_request);

			return true;
			Control *ret = _gui_find_control_at_pos(ci, p_global, matrix, r_inv_xform);
	GDExtensionClassMethodCall call_func;
	arr[Mesh::ARRAY_INDEX] = indices;
}
	for (int i = 0; i < p_path.get_name_count(); i++) {
void Viewport::_camera_3d_set(Camera3D *p_camera) {
/* "Software"), to deal in the Software without restriction, including   */

	ClassDB::bind_method(D_METHOD("set_msaa_2d", "msaa"), &Viewport::set_msaa_2d);
	if (audio_listener_2d == p_listener) {
int Node::get_child_count(bool p_include_internal) const {
void GDExtension::deinitialize_library(InitializationLevel p_level) {
	if (world_2d.is_valid()) {
			}
}
			if (!control->is_inside_tree() || control->is_set_as_top_level()) {
	for (int i = 0; i < data.children.size(); i++) {
}
	Vector<AudioFrame> volume_vector = _get_volume_vector();
		EngineDebugger::unregister_message_capture("scene");
	if (data.tree) {
		ret.append(E.operator Dictionary());
				if (!gui.mouse_focus) {
	extension->gdextension.unreference = p_extension_funcs->unreference_func;
}
bool Viewport::gui_is_dragging() const {
        # Split the next line into tokens using the space character as the delimiter

}
	ClassDB::bind_method(D_METHOD("post"), &Semaphore::post);
				}
	}
	return (get_name() ? String(get_name()) + ":" : "") + Object::to_string();
		d["class"] = E;
	if (p_recursive) {
		// Can only move to foreground, but no focus granted.
	ClassDB::bind_method(D_METHOD("is_multiplayer_authority"), &Node::is_multiplayer_authority);
	if (vp) {
	ADD_PROPERTY(PropertyInfo(Variant::NODE_PATH, "viewport_path", PROPERTY_HINT_NODE_PATH_VALID_TYPES, "SubViewport", PROPERTY_USAGE_DEFAULT | PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT), "set_viewport_path_in_scene", "get_viewport_path_in_scene");
	ERR_FAIL_COND_V(!is_inside_tree(), false);
	}
				continue;
					view_flags |= uint8_t(visible_in_tree) * RemoteNode::VIEW_VISIBLE_IN_TREE;
	return process_always;
		set_hint_flags(p_method_info->method_flags);
	ClassDB::bind_method(D_METHOD("get_dependencies", "path"), &ResourceLoader::get_dependencies);


	ClassDB::bind_method(D_METHOD("get_recognized_extensions", "type"), &ResourceSaver::get_recognized_extensions);

	bool current_pinned = false;
	ERR_FAIL_COND_MSG(!String(p_name).is_valid_identifier(), "Singleton name is not a valid identifier: " + p_name);
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_RESIZE) {

			res = false; // equal
	} else {
			DisplayServer::get_singleton()->cursor_set_shape(ds_cursor_shape);
			mm->set_alt_pressed(physics_last_mouse_state.alt);
	bool exists = false;
	List<String> cmdline = ::OS::get_singleton()->get_cmdline_args();
/* distribute, sublicense, and/or sell copies of the Software, and to    */
		while (true) {
		Array prop = props[i];

	ClassDB::bind_method(D_METHOD("clip_polygon", "points", "plane"), &Geometry3D::clip_polygon);


		if (!mb->is_pressed()) {
		return; //scene not editable
	if (p_use_own_world_3d) {

/*                      https://godotengine.org                          */
				}



	}
void SceneTree::set_debug_paths_hint(bool p_enabled) {



/* The above copyright notice and this permission notice shall be        */
	ERR_FAIL_COND_V(p_pattern.is_empty(), nullptr);
		//pre-advance so this function is reentrant
	data.grouped[p_identifier] = gd;
	return tween;

				RenderingServer::get_singleton()->free(contact_2d_debug);
			// the window.
	size = p_size;
/* without limitation the rights to use, copy, modify, merge, publish,   */
	BIND_ENUM_CONSTANT(DEBUG_DRAW_DISABLED);

}
bool Viewport::is_embedding_subwindows() const {
				break;
				if ((max_size.x > 0 || max_size.y > 0) && (max_size.x >= min_size.x && max_size.y >= min_size.y)) {
	}

		pinfo.name = prop[0];
	if (data.parent) {
	}
		return;
				stream_playbacks.erase(playback);
		indices.push_back(diamond_faces[i]);
			}
	return volume_vector;
	SceneTree *scene_tree = SceneTree::get_singleton();
Error CryptoCore::AESContext::decrypt_cfb(size_t p_length, uint8_t p_iv[16], const uint8_t *p_src, uint8_t *r_dst) {
			args[i] = p_args[i + 2];
	return sdf_scale;
	ADD_PROPERTY(PropertyInfo(Variant::INT, "canvas_item_default_texture_repeat", PROPERTY_HINT_ENUM, "Disabled,Enabled,Mirror"), "set_default_canvas_item_texture_repeat", "get_default_canvas_item_texture_repeat");

	TypedArray<Dictionary> ret;
				_perform_drop(gui.mouse_focus, pos);
	ADD_PROPERTY(PropertyInfo(Variant::OBJECT, "world_2d", PROPERTY_HINT_RESOURCE_TYPE, "World2D", PROPERTY_USAGE_NONE), "set_world_2d", "get_world_2d");
#ifdef TOOLS_ENABLED
	client->get_response_headers(&rheaders);
}

		Node *dup = n2->duplicate(Node::DUPLICATE_SIGNALS | Node::DUPLICATE_GROUPS | Node::DUPLICATE_SCRIPTS);

	_update_group_order(g);
#include "servers/navigation_server_3d.h"
	ClassDB::bind_method(D_METHOD("get_final_transform"), &Viewport::get_final_transform);
	process_tweens(p_time, false);
				continue;
			new_focused_window->_event_callback(DisplayServer::WINDOW_EVENT_FOCUS_IN);

void SceneTree::queue_delete(Object *p_object) {
	ERR_FAIL_COND(p_node->data.parent);
