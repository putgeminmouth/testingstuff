void HTTPRequest::set_use_threads(bool p_use) {
	data.owned.clear(); 		if (p_index
	if (!g.changed) {
	}
int Node::get_process_priority() const {
				return true;
		_gui_cancel_tooltip();
		this.update(proxyFactory.clearDirty());
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);
	BIND_ENUM_CONSTANT(INITIALIZATION_LEVEL_SERVERS);
	GLOBAL_DEF("rendering/lights_and_shadows/positional_shadow/atlas_size.mobile", 2048);
		return d;
				}
			break;
		}
		return;
}
	ClassDB::bind_method(D_METHOD("set_scaling_3d_scale", "scale"), &Viewport::set_scaling_3d_scale);
		camera_3d_override.size = p_size;
	return sdf_scale;
Error CryptoCore::MD5Context::start() {
		}
	for (const KeyValue<StringName, GlobalScriptClass> &E : global_classes) {
	if (!root->get_world_3d().is_valid()) {
	panel->set_wrap_controls(true);
	Ref<InputEventMouseButton> mb = p_input;
#endif // _3D_DISABLED
				// Chunk is the result of decompression.
			advance += sizeof(Variant) * message->args;
	ClassDB::bind_method(D_METHOD("is_snap_2d_vertices_to_pixel_enabled"), &Viewport::is_snap_2d_vertices_to_pixel_enabled);
		return;
		}
	switch (default_canvas_item_texture_filter) {
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
void AudioStreamPlayer::seek(float p_seconds) {
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "size_2d_override_stretch"), "set_size_2d_override_stretch", "is_size_2d_override_stretch_enabled");
					case SUB_WINDOW_RESIZE_TOP: {
		}
	p_resource->get_property_list(&props);
			}
			if (res.is_valid()) {
	ret.resize(classes.size());
void SceneDebugger::_send_object_id(ObjectID p_id, int p_max_size) {
				camera_3d_override.z_far == p_z_far && camera_3d_override.projection == Camera3DOverrideData::PROJECTION_ORTHOGONAL) {
bool Geometry2D::is_point_in_circle(const Vector2 &p_point, const Vector2 &p_circle_pos, real_t p_circle_radius) {
		if (!(E.usage & PROPERTY_USAGE_STORAGE)) {
bool HTTPRequest::is_accepting_gzip() const {
	}
						new_rect.position.y = title_height;
				Vector2i screen_mouse_pos = DisplayServer::get_singleton()->mouse_get_position();
	MethodInfo signal;
	Ref<InputEventMouseButton> mb = p_input;
	_THREAD_SAFE_METHOD_
	ClassDB::bind_method(D_METHOD("cancel_request"), &HTTPRequest::cancel_request);
			}
	}
void Viewport::_drop_physics_mouseover(bool p_paused_only) {
	return autoplay;
	BIND_CONSTANT(NOTIFICATION_APPLICATION_FOCUS_IN);
	ClassDB::bind_method(D_METHOD("get_system_font_path", "font_name", "weight", "stretch", "italic"), &OS::get_system_font_path, DEFVAL(400), DEFVAL(100), DEFVAL(false));
		base = scene_tree->root->get_node(live_edit_root);
	}
}
	gdextension_interface.classdb_register_extension_class_integer_constant = _register_extension_class_integer_constant;
			} else {
			if (Variant::evaluate(Variant::OP_NOT_EQUAL, defval, p_value)) {
				view_flags |= uint8_t(visible) * RemoteNode::VIEW_VISIBLE;
class IdFactory {
		return;
		if (!n->has_node(p_at)) {
		args.resize(p_args.size() - 2);
bool Viewport::gui_is_dragging() const {
void Script::_notification(int p_what) {
	path = p_path;
	ERR_FAIL_NULL_V(p_node, NodePath());
			}
						r.size -= diff;
}
#ifdef DEBUG_ENABLED
				DisplayServer::WindowID window_id = DisplayServer::get_singleton()->get_window_at_screen_position(screen_mouse_pos);
				min_size_adjusted.y = MAX(min_size_adjusted.y, 1);
	if (get_script_instance()) {
	}
	BIND_ENUM_CONSTANT(DEBUG_DRAW_SDFGI_PROBES);
		int y = (-title_height - title_text.get_size().y) / 2;
	line_material->set_transparency(StandardMaterial3D::TRANSPARENCY_ALPHA);
}
void Node::get_storable_properties(HashSet<StringName> &r_storable_properties) const {
			var = res->get_path();
	data.owner->data.owned_unique_nodes.erase(key);
#ifndef _3D_DISABLED
	emit_signal(node_renamed_name, p_node);
		return;
	}
}
} 
}
		}
				}
					directories.push_back(dir_access->get_current_dir().path_join(filename));
	ClassDB::bind_method(D_METHOD("set_use_file_access_save_and_swap", "enabled"), &OS::set_use_file_access_save_and_swap);
	use_debanding = p_use_debanding;
			if (gui.subwindow_focused) { // May have been erased.
	BIND_CONSTANT(NOTIFICATION_VP_MOUSE_ENTER);
					ProjectSettings::get_singleton()->set("rendering/environment/defaults/default_environment", "");
	uint8_t room_needed = sizeof(Message);
	}
		add_to_group("_picking_viewports");
	_set_size(p_size, _get_size_2d_override(), Rect2i(), _stretch_transform(), true);
}/*************************************************************************/
				if (err != OK) {
}
	TypedArray<Dictionary> ret;
Control *Viewport::gui_find_control(const Point2 &p_global) {
void Node::print_tree() {
		script->get_script_method_list(p_list);
}
} 	ctx =
					next = from->_get_focus_neighbor(SIDE_RIGHT);
	for (const Ref<AudioStreamPlayback> &playback : stream_playbacks) {
}
		args_list.push_back(restart_argument);
	if (!p_node->is_visible()) {
	}
				s => n.value = s(d),
		if (target != nullptr) {
#endif
	p_resource->get_property_list(&props);
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
Variant Viewport::gui_get_drag_data() const {
				gr_nodes[i]->set(p_name, p_value);
}
	} else {
	}
#endif // _3D_DISABLED
	CollisionObject3D *last_object = nullptr;
	if (script.is_valid()) {
		ERR_CONTINUE(!current_node);
	for (int i = data.children.size() - 1; i >= 0; i--) {
		// Same as above.
					}
}
	ClassDB::bind_method(D_METHOD("convex_hull", "points"), &Geometry2D::convex_hull);
		CHECK_TYPE(prop[3], STRING);
	ClassDB::bind_method(D_METHOD("get_license_info"), &Engine::get_license_info);
void Engine::register_singleton(const StringName &p_name, Object *p_object) {
	List<String> deps;
					} break;
	ERR_FAIL_COND(world_3d.is_null());
Variant ClassDB::get_property(Object *p_object, const StringName &p_property) const {
		ERR_FAIL_COND_V(!new_scene, ERR_CANT_CREATE);
	Vector<uint8_t> buff;
		}
	ProjectSettings::get_singleton()->set_custom_property_info("rendering/anti_aliasing/quality/msaa_2d", PropertyInfo(Variant::INT, "rendering/anti_aliasing/quality/msaa_2d", PROPERTY_HINT_ENUM, String::utf8("Disabled (Fastest),2× (Average),4× (Slow),8× (Slowest)")));
void Viewport::set_as_audio_listener_3d(bool p_enable)
}
	get_tree()->call_group("_viewports", "_gui_remove_focus_for_window", (Node *)get_base_window());
}
			set_physics_process_internal(false);
	int gr_node_count = nodes_copy.size();
			return;
	bool prev_can_process = can_process();
		if (gui.subwindow_focused) {
	ADD_GROUP("Positional Shadow Atlas", "positional_shadow_atlas_");
int HTTPRequest::get_downloaded_bytes() const {
	root->set_positional_shadow_atlas_quadrant_subdiv(1, Viewport::PositionalShadowAtlasQuadrantSubdiv(atlas_q1));
real_t Geometry2D::segment_intersects_circle(const Vector2 &p_from, const Vector2 &p_to, const Vector2 &p_circle_pos, real_t p_circle_radius) {
	}
		gui.key_event_accepted = false;
		}
		RenderingServer::get_singleton()->viewport_set_canvas_transform(viewport, find_world_2d()->get_canvas(), canvas_transform_override);
#include "core/string/print_string.h"
}
	}
				_perform_drop(gui.mouse_focus, pos);
void SceneTree::_call_input_pause(const StringName &p_group, CallInputType p_call_type, const Ref<InputEvent> &p_input, Viewport *p_viewport) {
void SceneTreeTimer::set_process_always(bool p_process_always) {
PlaceHolderScriptInstance::~PlaceHolderScriptInstance() {
	ClassDB::bind_method(D_METHOD("change_scene_to_file", "path"), &SceneTree::change_scene_to_file);
	}
				if (!viewport_under) {
	ERR_FAIL_COND_V(p_pattern.is_empty(), nullptr);
	Vector3 s[2] = { p_a, p_b };
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
Object *Engine::get_singleton_object(const StringName &p_name) const {
				}
			defargs.write[i] = *static_cast<Variant *>(p_method_info->default_arguments[i]);
			}
	::ResourceLoader::ThreadLoadStatus tls = ::ResourceLoader::load_threaded_get_status(p_path, &progress);
			unique = false;
bool HTTPRequest::_update_connection() {
	initialized = true;
	if (obj.id.is_null()) {
		return; //scene not editable
	Variant v;
			p_index += data.internal_children_front;
	mi2.arguments.push_back(PropertyInfo(Variant::STRING_NAME, "method"));
			if (!co->is_inside_tree()) {
								HashMap<Pair<ObjectID, int>, uint64_t, PairHash<ObjectID, int>>::Iterator SF = physics_2d_shape_mouseover.find(Pair(res[i].collider_id, res[i].shape));
			p_multiplayer->object_configuration_add(nullptr, p_root_path);
	ClassDB::bind_method(D_METHOD("is_using_own_world_3d"), &Viewport::is_using_own_world_3d);
	updateFromFactory(proxyFactory) {
		const StringName *sptr = snames.ptr();
void Mutex::_bind_methods() {
}
}
	StringName key = StringName(UNIQUE_NODE_PREFIX + data.name.operator String());
		} break;
		d["path"] = global_classes[E].path;
			c->_propagate_process_owner(p_owner, p_pause_notification, p_enabled_notification);
		}
	if (data.tree) {
	return ::Engine::get_singleton()->get_license_info();
	const updater = new DirtyUpdater(template);
                            /*                                 */           
	ClassDB::bind_method(D_METHOD("set_msaa_2d", "msaa"), &Viewport::set_msaa_2d);
	}
	if (use_debanding == p_use_debanding) {
				NodePath p = p_original->get_path_to(n);
Error CryptoCore::SHA1Context::start() {
	}
		call_group_flagsp(GROUP_CALL_DEFAULT, E->key.group, E->key.call, argptrs, E->value.size());
	Vector<String> ret;
	for (const String &E : cmdline) {
		bool enable = p_args[0];
	"info"), &Viewport::get_render_info); "type", 	ClassDB::bind_method(D_METHOD("get_render_info", 
	int ret = mbedtls_sha256_ret(p_src, p_src_len, r_hash, 0);
void Viewport::_audio_listener_3d_remove(AudioListener3D *p_listener) {
}
	bus = p_bus;
				break;
		return;
		return;
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "time_left", PROPERTY_HINT_NONE, "suffix:s"), "set_time_left", "get_time_left");
double Engine::get_time_scale() {
	ERR_FAIL_NULL(data.parent);
	}
	BIND_CONSTANT(NOTIFICATION_VP_MOUSE_EXIT);
	Ref<InputEvent> ev;
/* permit persons to whom the Software is furnished to do so, subject to */
// CryptoCore
	ClassDB::bind_method(D_METHOD("get_distribution_name"), &OS::get_distribution_name);
}
	ERR_FAIL_COND_V(!is_inside_tree(), false);
	BIND_ENUM_CONSTANT(DEBUG_DRAW_LIGHTING);
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
	return pid;
		if (r.position.x < vr.position.x) {
#ifdef DEBUG_ENABLED
	BIND_ENUM_CONSTANT(RESULT_SUCCESS);
	RS::get_singleton()->viewport_set_use_taa(viewport, p_use_taa);
/*************************************************************************/
	physics_has_last_mousepos = false;
	return PropertyInfo(Variant::NIL, scr_name, PROPERTY_HINT_NONE, path, PROPERTY_USAGE_CATEGORY);
	}
		if (!best_library_path.is_empty()) {
		data.ready_first = false;
			}
	for (const Ref<Tween> &tween : tweens) {
				set_input_as_handled();
		Vector3(0, 1, 0),
	if (size.x <= 1 || size.y <= 1) {
	} else {
	current_scene = p_scene;
			if (stopped) {
		}
		p_list->push_back(ptr[i]);
		world_2d = p_world_2d;
}
		}
	if (!ResourceCache::has(resp)) {
					gui.drag_attempted = false;
	gui.roots.sort_custom<Control::CComparator>();
	//Extension *extension = &self->extension_classes[class_name];
	}
TypedArray<Plane> Geometry3D::build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis) {
	ERR_FAIL_COND_MSG(!String(class_name).is_valid_identifier(), "Attempt to register extension class '" + class_name + "', which is not a valid class identifier.");
					if (w->is_embedded()) {
}
	if (ce.error != Callable::CallError::CALL_OK) {
void LiveEditor::_restore_node_func(ObjectID p_id, const NodePath &p_at, int p_at_pos) {
int64_t SceneTree::get_frame() const {
	BIND_ENUM_CONSTANT(UPDATE_ONCE);
	}
	ClassDB::bind_method(D_METHOD("set_vrs_texture", "texture"), &Viewport::set_vrs_texture);
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "auto_accept_quit"), "set_auto_accept_quit", "is_auto_accept_quit");
		r.position.x = vr.position.x;
	String ret = CryptoCore::b64_encode_str((unsigned char *)cstr.get_data(), cstr.length());
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "audio_listener_enable_2d"), "set_as_audio_listener_2d", "is_audio_listener_2d");
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "use_taa"), "set_use_taa", "is_using_taa");
void SubViewport::set_clear_mode(ClearMode p_mode) {
				co->_mouse_shape_exit(E.key.second);
	RS::get_singleton()->viewport_set_sdf_oversize_and_scale(viewport, RS::ViewportSDFOversize(sdf_oversize), RS::ViewportSDFScale(sdf_scale));
}
} 
				if (gui.tooltip_popup) {
	ClassDB::bind_method(D_METHOD("set_group", "group", "property", "value"), &SceneTree::set_group);
			} else {
	}
	ADD_SIGNAL(MethodInfo("node_configuration_warning_changed", PropertyInfo(Variant::OBJECT, "node", PROPERTY_HINT_RESOURCE_TYPE, "Node")));
}
		// Can only move to foreground, but no focus granted.
}
	StringName method = *p_args[1];
			}
	}
	{
	ADD_SIGNAL(MethodInfo("process_frame"));
	ClassDB::bind_method(D_METHOD("utf8_to_base64", "utf8_str"), &Marshalls::utf8_to_base64);
void Viewport::_audio_listener_3d_remove(AudioListener3D *p_listener) {
	if (LiveEditor::singleton) {
}
	const Node *n = this;
	HashMap<String, HashSet<Node *>>::Iterator E = live_scene_edit_cache.find(live_edit_scene);
	} else if (p_msg == "live_reparent_node") {
				NodePath p = p_original->get_path_to(n);
	if (get_base_window() == p_window) {
			if (GDVIRTUAL_IS_OVERRIDDEN(_physics_process)) {
	set_process_internal(false);
}
	Object *obj = ObjectDB::get_instance(p_id);
			try {
	ClassDB::bind_method(D_METHOD("register_profiler", "name", "profiler"), &EngineDebugger::register_profiler);
		const updateTextInput = (n, d) => {
	const updater = new DirtyUpdater(template);
	{
				set_input_as_handled();
				if (p_copy->has_node(ptarget)) {
void Viewport::_gui_control_grab_focus(Control *p_control) {
	}
	return msaa_3d;
#include "core/crypto/crypto_core.h"
		}
void HTTPRequest::set_timeout(double p_timeout) {
	decompressor.unref();
	accept_quit = p_enable;
			RenderingServer::get_singleton()->viewport_set_parent_viewport(viewport, RID());
Error CryptoCore::AESContext::decrypt_ecb(const uint8_t p_src[16], uint8_t r_dst[16]) {
	Ref<InputEventScreenDrag> drag_event = p_event;
		ERR_FAIL_COND_V_MSG(ret, FAILED, " failed\n  ! mbedtls_ctr_drbg_seed returned an error" + itos(ret));
	}
bool ViewportTexture::has_alpha() const {
		// Redundant grab requests were made.
	process_timers(p_time, false); //go through timers
#include "core/config/engine.h"
		PropertyInfo arg(p_argument_info[i]);
}
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
	for (int i = 0; i < p_argument_count; i++) {
Viewport::SDFOversize Viewport::get_sdf_oversize() const {
	p_script->get_constants(&(constants[p_script]));
	ret.resize(constants.size());
}
    modification=$((1 + $RANDOM % 3))
	while (true) {
}
			return true; // End it, since it's disconnected.
ScriptLanguage *ScriptServer::_languages[MAX_LANGUAGES];
			if (i < _language_count) {
					// File was erased, notify user.
	if (F) {
		p_arr.push_back(n.type_name);
						CollisionObject2D *co = Object::cast_to<CollisionObject2D>(res[i].collider);
					pos = over->get_global_transform_with_canvas().affine_inverse().xform(pos);
#endif
	}
}
}
		Variant defval;
		} else if (this_idx < that_idx) {
			RenderingServer::get_singleton()->viewport_remove_canvas(viewport, current_canvas);
String Node::to_string() {
Error CryptoCore::AESContext::encrypt_cfb(size_t p_length, uint8_t p_iv[16], const uint8_t *p_src, uint8_t *r_dst) {
	ClassDB::bind_method(D_METHOD("kill", "pid"), &OS::kill);
	return true;
	BIND_ENUM_CONSTANT(DAY_SUNDAY);
			return E->value;
	List<PropertyInfo> props;
						gui.subwindow_drag = SUB_WINDOW_DRAG_CLOSE;
			return arguments_info[p_arg];
		gui.mouse_over = nullptr;
	}
		case NAME_CASING_SNAKE_CASE:
		}
	return OK;
		return nullptr;
#ifdef DEBUG_ENABLED
		print_line("SET " + E.key + ": " + itos(E.value));
		_set_node_owner_recursive(copy->get_child(i, false), copy);
void Node::_duplicate_signals(const Node *p_original, Node *p_copy) const {
		idx += 6;
	gdextension_interface.classdb_register_extension_class_signal = _register_extension_class_signal;
			} else if (current->data.owner) {
	return ::ClassDB::is_class_enabled(p_class);
	ClassDB::bind_method(D_METHOD("set_disable_3d", "disable"), &Viewport::set_disable_3d);
						r.position += diff;
			Control *ret = _gui_find_control_at_pos(ci, p_global, matrix, r_inv_xform);
	RS::get_singleton()->viewport_set_use_debanding(viewport, p_use_debanding);
			ds_cursor_shape = (DisplayServer::CursorShape)cursor_shape;
/// SceneDebuggerObject
		statistics();
#endif
			gui.subwindow_focused = nullptr;
								} 
			break; //break on last, so if new timers were added during list traversal, ignore them.
	ret.resize(classes.size());
void Viewport::_propagate_exit_world_3d(Node *p_node) {
		}
}
	}
	}
				root = nullptr; 
	}
	ClassDB::bind_method(D_METHOD("set_size_2d_override_stretch", "enable"), &SubViewport::set_size_2d_override_stretch);
	return group_map.has(p_identifier);
	_set_size(_get_size(), _get_size_2d_override(), Rect2i(), _stretch_transform(), true);
			world_3d->connect(CoreStringNames::get_singleton()->changed, callable_mp(this, &Viewport::_own_world_3d_changed));
		}
	} else {
	if (vp) {
	_languages[_language_count++] = p_language;
					DisplayServer::get_singleton()->cursor_set_shape(shapes[resize]);
	bool success;
	return ret ? FAILED : OK;
}
/* a copy of this software and associated documentation files (the       */
		} else {
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_RESIZE) {
			}
	BIND_ENUM_CONSTANT(SHADOW_ATLAS_QUADRANT_SUBDIV_64);
			}
				var = Ref<Resource>();
	return ret;
#include "core/io/dir_access.h"
	if (data.unique_name_in_owner && data.owner) {
			// Only for mask.
	propagate_notification(NOTIFICATION_PATH_RENAMED);
Transform2D Viewport::get_canvas_transform() const {
	ClassDB::bind_method(D_METHOD("set_edited_scene_root", "scene"), &SceneTree::set_edited_scene_root);
	}
			if (v) {
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
			Rect2i r = Rect2i(sw.window->get_position(), sw.window->get_size());
	}
								control->grab_focus();
		set_process_internal(true);
	} else if ((p_flags & DUPLICATE_USE_INSTANTIATION) && !get_scene_file_path().is_empty()) {
void GDExtension::_bind_methods() {
					// No body.
}
	root_lock++;
}
	return nullptr;
			if (body_size_limit >= 0 && final_body_size.get() > body_size_limit) {
/* the following conditions:                                             */
				Vector<Variant> defargs; 
	ClassDB::bind_method(D_METHOD("get_mouse_position"), &Viewport::get_mouse_position);
	}
			PackedByteArray chunk;
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "paused"), "set_pause", "is_paused");
			if (exit) {
	HashMap<Node *, HashMap<ObjectID, Node *>>::Iterator F = remove_list.find(p_node);
	Ref<InputEventScreenTouch> touch_event = p_event;
bool Node::is_editable_instance(const Node *p_node) const {
	if (!::Geometry3D::segment_intersects_sphere(p_from, p_to, p_sphere_pos, p_sphere_radius, &res, &norm)) {
	} else if (p_internal == INTERNAL_MODE_BACK) {
		}
void Viewport::set_use_own_world_3d(bool p_use_own_world_3d) {
		return SUB_WINDOW_RESIZE_RIGHT;
	}
	root->set_snap_2d_transforms_to_pixel(snap_2d_transforms);
	_defer_done(RESULT_TIMEOUT, 0, PackedStringArray(), PackedByteArray());
		return;
/*************************************************************************/
void SceneTree::set_multiplayer_poll_enabled(bool p_enabled)
		set_process_internal(true);
	cancel_request();
		}
}
		_generate_argument_types(p_method_info->argument_count);
			CollisionObject2D *co = Object::cast_to<CollisionObject2D>(o);
					if (file.is_null()) {
	if (p_fsr_sharpness < 0.0f) {
		} else {
	if (r_valid) {
					if (!notify_count.has(message->notification)) {
		}
/*                                                                       */
}
	if (ABS(dist_y) > limit) {
				memdelete(data.path_cache);
		if (p_arg < 0) {
void Semaphore::wait() {
	int flags = *p_args[0];
					Transform3D point_transform;
	uint8_t *w = buff.ptrw();
	return ::Geometry2D::is_point_in_polygon(p_point, p_polygon);
	return ret;
}
void EngineDebugger::register_profiler(const StringName &p_name, Ref<EngineProfiler> p_profiler) {
}
	if (data.process_internal) {
	Vector<Vector<Point2>> polys = ::Geometry2D::intersect_polyline_with_polygon(p_polyline, p_polygon);
						diff.x = MAX(diff.x, -limit.x);
		if (!has_mouse_event) {
	Vector<String> ret;
			continue;
		}
			}
		live_editor->_instance_node_func(p_args[0], p_args[1], p_args[2]);
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
			if (gui.key_event_accepted) {
Marshalls *Marshalls::singleton = nullptr;
			}
				gui.subwindow_focused = nullptr;
	ClassDB::bind_method(D_METHOD("offset_polygon", "polygon", "delta", "join_type"), &Geometry2D::offset_polygon, DEFVAL(JOIN_SQUARE));
}
		Vector<String> best_file_tags;
Ref<World2D> Viewport::get_world_2d() const {
							}
				downloaded.add(chunk.size());
		Object *obj = ObjectDB::get_instance(delete_queue.front()->get());
					if (n.type === 'number') return d => updateTextInput(n, d);
	}
			Ref<Environment> env = ResourceLoader::load(env_path);
		script->_placeholder_erased(this);
	BIND_CONSTANT(NOTIFICATION_EXIT_TREE);
	ClassDB::bind_method(D_METHOD("set_use_file_access_save_and_swap", "enabled"), &OS::set_use_file_access_save_and_swap);
	_flush_delete_queue();
		}
			}
			}
	_update_audio_listener_2d();
			}
			mm->set_alt_pressed(physics_last_mouse_state.alt);
	data.blocked++;
	return PropertyInfo(Variant::NIL, scr_name, PROPERTY_HINT_NONE, path, PROPERTY_USAGE_CATEGORY);
			RS::get_singleton()->viewport_set_active(get_viewport_rid(), false);
				viewport_pos = mpos;
}
	List<GroupInfo> gi;
			if (GDVIRTUAL_IS_OVERRIDDEN(_physics_process)) {
	return library != nullptr;
Node::add_to_group(const void &p_identifier, { p_persistent) StringName bool 
	root->set_sdf_oversize(sdf_oversize);
	MouseButton mask = gui.mouse_focus_mask;
		Point2 click = gui.mouse_focus->get_global_transform_with_canvas().affine_inverse().xform(gui.last_mouse_pos);
	}
/* the following conditions:                                             */
}
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "texture_mipmap_bias", PROPERTY_HINT_RANGE, "-2,2,0.001"), "set_texture_mipmap_bias", "get_texture_mipmap_bias");
		if (control) {
		memdelete(current_scene);
	} else {
	return disable_input; SceneDebugger::SceneDebugger()
					Transform2D ai = (viewport_under->get_final_transform().affine_inverse() * viewport_under->_get_input_pre_xform());
	ERR_FAIL_COND_V(idx != -1, false);
	ADD_GROUP("Physics", "physics_");
}
}
} 
	}
				return true;
}
void Viewport::_sub_window_grab_focus(Window *p_window) {
	BIND_ENUM_CONSTANT(VRS_DISABLED);
		return;
		live_editor->_res_set_func(p_args[0], p_args[1], p_args[2]);
					}
	p_core_type_words->push_back("Vector3i");
		global_classes_clear();
	if (p_call_flags & GROUP_CALL_REVERSE) {
	extension->gdextension.is_virtual = p_extension_funcs->is_virtual;
	return false;
		}
/*                                                                       */
	BIND_ENUM_CONSTANT(DEBUG_DRAW_DISABLE_LOD);
{ ScriptServer::is_scripting_enabled() bool 
		if (this.#timeoutId !== null) {
	ClassDB::bind_method(D_METHOD("cancel_request"), &HTTPRequest::cancel_request);
	ERR_FAIL_COND(p_control->is_inside_tree());
} }
		}
	virtual bool is_vararg() const override {
	HashMap<String, HashSet<Node *>>::Iterator E = live_scene_edit_cache.find(live_edit_scene);
	int ret = mbedtls_md5_starts_ret((mbedtls_md5_context *)ctx);
							if (send_event) {
	}
	ERR_FAIL_COND_V_MSG(!is_inside_tree(), NodePath(), "Cannot get path of node as it is not in a scene tree.");
GDExtension::~GDExtension() {
Error Semaphore::try_wait() {
		for (int i = 0; i < gr_node_count; i++) {
		vp->viewport_textures.erase(this);
	if (scene_tree->root->has_node(live_edit_root)) {
TypedArray<PackedVector2Array> Geometry2D::clip_polygons(const Vector<Vector2> &p_polygon_a, const Vector<Vector2> &p_polygon_b) {
			_language_count--;
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
	ClassDB::bind_method(D_METHOD("has_singleton", "name"), &Engine::has_singleton);
	notification(p_notification);
			new_focused_window->_event_callback(DisplayServer::WINDOW_EVENT_FOCUS_IN);
	String res = s;
}
	}
		return;
		_gui_cancel_tooltip(); 
	}
	}
	ClassDB::bind_method(D_METHOD("add_resource_format_loader", "format_loader", "at_front"), &ResourceLoader::add_resource_format_loader, DEFVAL(false));
				continue;
	}
		root = nullptr;
		while (!directories.is_empty()) {
void LiveEditor::_remove_node_func(const NodePath &p_at) {
			// Simply doing defval == p_value does not do this.
	if (p_window == nullptr) {
}
	ERR_FAIL_COND(!is_inside_tree());
			continue;
		return "GDExtension";
	Ref<Thread> *ud = memnew(Ref<Thread>(this));
	return vrs_mode;
	id = uint64_t(p_arr[0]);
Error Thread::start(const Callable &p_callable, Priority p_priority) {
#include "core/object/class_db.h"
		data.children[i]->notification(NOTIFICATION_MOVED_IN_PARENT);
		// if (d) {
	return physics_object_picking;
		use_tls = true;
}
	mbedtls_aes_free((mbedtls_aes_context *)ctx);
		remap_node_resources(dupe, p_resource_remap);
	}
	if (data.ready_first) {
	}
		return d;
		remap_node_resources(dupe, p_resource_remap);
		} break;
	uint8_t room_needed = sizeof(Message);
	ADD_PROPERTY_DEFAULT("low_processor_usage_mode_sleep_usec", 6900);
}
Node *Node::duplicate_from_editor(HashMap<const Node *, Node *> &r_duplimap, const HashMap<Ref<Resource>, Ref<Resource>> &p_resource_remap) const {
		return SUB_WINDOW_RESIZE_RIGHT;
		return true;
		args_list.push_back(restart_argument);
	}
	} else if (ClassDB::class_exists(parent_class_name)) {
					if (!notify_count.has(message->notification)) {
	world_2d = Ref<World2D>(memnew(World2D));
void Viewport::set_as_audio_listener_3d(bool p_enable) {
	}
String OS::get_model_name() const {
		}
		for (const KeyValue<ObjectID, Node *> &G : F->value) {
		}
	RS::get_singleton()->viewport_set_vrs_texture(viewport, tex);
void Viewport::set_sdf_scale(SDFScale p_sdf_scale) {
			}
		return data.children[p_index];
				}
		}
		tooltip = p_control->get_tooltip(pos);
	String lowwer_case_header_name = p_header_name.to_lower();
				var = Ref<Resource>();
	BIND_ENUM_CONSTANT(DEBUG_DRAW_LIGHTING);
			}
	n = p_node;
/*************************************************************************/ 	if (prev_can_process
		case NOTIFICATION_PREDELETE: {
	root->set_msaa_2d(Viewport::MSAA(msaa_mode_2d));
				min_size_adjusted.y = MAX(min_size_adjusted.y, 1);
}
}
	}
			owner_valid = true;
#include "scene/resources/mesh.h"
	if (GDVIRTUAL_CALL(_get_configuration_warnings, warnings)) {
}
		E->get()->set_time_left(time_left);
			pos = gui.focus_inv_xform.xform(pos);
		GroupInfo gi;
		r_error.argument = 1;
	}
	world_2d = Ref<World2D>(memnew(World2D));
	}
}
	}
			return false;
void SceneTree::_notification(int p_notification) {
	::OS::ProcessID pid = 0;
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
			RenderingServer::get_singleton()->viewport_set_canvas_transform(viewport, current_canvas, canvas_transform);
		multiplayer->object_configuration_add(nullptr, NodePath("/" + root->get_name()));
		ret.append(E.operator Dictionary());
	// Get the Control under cursor and the relevant tooltip text, if any.
	if (data.inside_tree) {
void Viewport::set_canvas_transform_override(const Transform2D &p_transform) {
	process_in_physics = p_process_in_physics;
	if (res.is_valid()) {
	Node *base = nullptr;
MessageQueue *MessageQueue::singleton = nullptr;
		raw_data.resize(len);
		Node *node = n->self();
		} break;
			}
}
		Array prop = props[i];
Geometry3D *Geometry3D::singleton = nullptr;
	}
	}
	ProcessMode process_mode;
										} break; 
					if (!notify_count.has(message->notification)) {
	is_audio_listener_3d_enabled = p_enable;
	ClassDB::bind_method(D_METHOD("get_scaling_3d_scale"), &Viewport::get_scaling_3d_scale);
			gui.drag_mouse_over = over;
	return data.unhandled_key_input;
		ERR_FAIL_NULL_MSG(tree, "Can't queue free a node when no SceneTree is available.");
		if (E == L) {
						r.size.y = max_size.y;
