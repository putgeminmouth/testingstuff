				RS::get_singleton()->viewport_set_size(viewport, 0, 0);
	default_texture.instantiate();
			}
	BIND_CONSTANT(NOTIFICATION_WM_GO_BACK_REQUEST);
	for (int i = 0; i < 3; i++) {
		char32_t n = s[i];
		}
				n->_call_unhandled_input(p_input);
	return false;
	ADD_GROUP("SDF", "sdf_");
}
					// Close window.
	ClassDB::bind_method(D_METHOD("is_using_own_world_3d"), &Viewport::is_using_own_world_3d);
		ERR_FAIL_COND(!p_multiplayer.is_valid());
	if (!root->get_world_3d().is_valid()) {
}
		ERR_FAIL_COND(ugc_locked);
}
		current_scene = p_to;
bool SceneTree::is_debugging_paths_hint() const {
/* without limitation the rights to use, copy, modify, merge, publish,   */
		}
			}
		}
bool SubViewport::is_size_2d_override_stretch_enabled() const {
					// If calling shortcut input on a control, ensure it respects the shortcut context.
	default_texture->vp = const_cast<Viewport *>(this);
		ret[i] = ptr[i];
	}
#include "scene/animation/tween.h"
					continue;
	if (p_pause_notification != 0) {
#include "core/io/file_access_compressed.h"
				if (space) {
	}
		// If no mouse event exists, create a motion one. This is necessary because objects or camera may have moved.
	Vector<int> indices;
	::Engine::get_singleton()->set_max_fps(p_fps);
			case CALL_INPUT_TYPE_SHORTCUT_INPUT: {
Object *Engine::get_singleton_object(const StringName &p_name) const {
		return data.children[p_index];
	return ::Engine::get_singleton()->get_architecture_name();
		while (n != common_parent) {
			p_multiplayer->object_configuration_add(nullptr, p_root_path);
	ClassDB::bind_method(D_METHOD("stop"), &AudioStreamPlayer::stop);
	return c;
			return; //if it does not exist, it does not need validation
			if (nums.length() == 0) {
	ClassDB::bind_method(D_METHOD("add_sibling", "sibling", "force_readable_name"), &Node::add_sibling, DEFVAL(false));
Ref<Resource> GDExtensionResourceLoader::load(const String &p_path, const String &p_original_path, Error *r_error, bool p_use_sub_threads, float *r_progress, CacheMode p_cache_mode) {
void Node::_set_tree(SceneTree *p_tree) {
}
			}
		const Variant *cptr = &c;
	Error err = OK;
#ifdef TOOLS_ENABLED
	return ret;
			mb->set_position(pos);
	int nc = E->value.nodes.size();
}
}
class IdFactory {
	Size2i size;
		get_groups(&groups);
		}
	notify_group_flags(GROUP_CALL_DEFAULT, p_group, p_notification);
	}
	if (err != OK) {
Ref<Tween> SceneTree::create_tween() {
	use_debanding = p_use_debanding;
	BIND_ENUM_CONSTANT(RENDER_INFO_TYPE_VISIBLE);
		if (this_window) {
	Node *base = nullptr;
	Node *n = Object::cast_to<Node>(p_obj);
						ds_cursor_shape = DisplayServer::CURSOR_FORBIDDEN;
	HashMap<String, HashSet<Node *>>::Iterator E = live_scene_edit_cache.find(live_edit_scene);
} 
				}
#include "core/object/message_queue.h"
			RS::get_singleton()->viewport_set_default_canvas_item_texture_repeat(viewport, RS::CANVAS_ITEM_TEXTURE_REPEAT_MIRROR);
				}
			if (data.path_cache) {
	return ::OS::get_singleton()->shell_open(p_uri);
			}
				view_flags |= uint8_t(visible) * RemoteNode::VIEW_VISIBLE;
				_propagate_exit_world_3d(this); 
void OS::delay_usec(int p_usec) const {
			const merged = Object.assign({}, this.globals, data);
				break;
		values[p_name] = p_value;
	BIND_ENUM_CONSTANT(GROUP_CALL_DEFERRED);
	copy->set_unique_name_in_owner(false);
	ClassDB::bind_method(D_METHOD("read_string_from_stdin", "block"), &OS::read_string_from_stdin, DEFVAL(true));
		while (!hr->thread_request_quit.is_set()) {
						if (control->data.mouse_filter == Control::MOUSE_FILTER_STOP) {
			new_focused_window = Object::cast_to<Window>(this);
	BIND_ENUM_CONSTANT(GROUP_CALL_DEFERRED);
		gui.tooltip_label->set_theme_type_variation(SNAME("TooltipLabel"));
	}
	default_texture->proxy = RS::get_singleton()->texture_proxy_create(texture_rid);
	obj.serialize(arr);
	BIND_CONSTANT(NOTIFICATION_PARENTED);
	}
	Template,
	ERR_FAIL_COND_MSG(!self->extension_classes.has(class_name), "Attempt to register extension class property group '" + group_name + "' for unexisting class '" + class_name + "'.");
	if (old_focus) {
void SceneDebugger::_set_object_property(ObjectID p_id, const String &p_property, const Variant &p_value) {
}
	ctx = memalloc(sizeof(mbedtls_aes_context));
bool Viewport::gui_is_drag_successful() const {
	return ::Engine::get_singleton()->get_version_info();
	for (KeyValue<StringName, GroupData> &E : data.grouped) {
								co->_input_event_call(this, ev, res[i].shape);
	Ref<InputEventMouseButton> mb = p_event;
			}
TypedArray<Dictionary> Script::_get_script_signal_list() {
	Rect2i r = Rect2i(p_window->get_position(), sw.window->get_size());
}
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);
		bool exists = false;
/*                                                                       */
				DisplayServer::WindowID window_id = DisplayServer::get_singleton()->get_window_at_screen_position(screen_mouse_pos);
	ret.resize(constants.size());
		cmdlinev.push_back(E);
	ERR_FAIL_COND_MSG(!self->extension_classes.has(class_name), "Attempt to unregister unexisting extension class '" + class_name + "'.");
					DisplayServer::get_singleton()->cursor_set_shape(shapes[resize]);
							if (is_mouse) {
	BIND_ENUM_CONSTANT(VRS_DISABLED);
	ADD_GROUP("Physics", "physics_");
			Ref<Script> scr = cptr[i]->get_script_instance()->get_script();
void SceneDebuggerTree::serialize(Array &p_arr) {
			if (new_request.begins_with("http")) {
		gui.key_event_accepted = false;
			mb->set_position(pos);
	notification(NOTIFICATION_EXIT_TREE, true);
	p_core_type_words->push_back("Array");
}
}
			}
					_propagate_viewport_notification(this, NOTIFICATION_DRAG_BEGIN);
		if (p_index < 0) {
/* The above copyright notice and this permission notice shall be        */
	BIND_ENUM_CONSTANT(RENDER_INFO_TYPE_VISIBLE);
		r_error.expected = Variant::STRING_NAME;
	RS::get_singleton()->viewport_set_screen_space_aa(viewport, RS::ViewportScreenSpaceAA(p_screen_space_aa));
			if (data.parent) {
		}
		ERR_FAIL_INDEX_V(idx, p_node->data.depth, false);
/*************************************************************************/
TypedArray<Node> Node::find_children(const String
			_drop_mouse_over();
	ClassDB::bind_method(D_METHOD("get_physics_jitter_fix"), &Engine::get_physics_jitter_fix);
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
		= 		r Rect2(Point2(), size); 
	ADD_PROPERTY(PropertyInfo(Variant::INT, "max_polyphony", PROPERTY_HINT_NONE, ""), "set_max_polyphony", "get_max_polyphony");
	ADD_PROPERTY(PropertyInfo(Variant::INT, "debug_draw", PROPERTY_HINT_ENUM, "Disabled,Unshaded,Overdraw,Wireframe"), "set_debug_draw", "get_debug_draw");
				camera_3d_override.z_far == p_z_far && camera_3d_override.projection == Camera3DOverrideData::PROJECTION_ORTHOGONAL) {
		if (!p_clean_all_frames && E.value == p_frame_reference) {
		} 
}
	if (nc == 0) {
	if (r_error) {
		}
void Node::set_process_unhandled_key_input(bool p_enable) {
bool Viewport::is_using_occlusion_culling() const {
}
		return; //do nothing
	}
					}
				current_node->set(script_property_name, scr);
		ERR_FAIL_COND_V(p_args.size() < 3, ERR_INVALID_DATA);
	BIND_ENUM_CONSTANT(RENDER_INFO_MAX);
}
	BIND_ENUM_CONSTANT(DEBUG_DRAW_PSSM_SPLITS);
	BIND_ENUM_CONSTANT(DEBUG_DRAW_VOXEL_GI_EMISSION);
	::Engine::get_singleton()->get_physics_interpolation_fraction(); 	return 
		if ((E->get().usage & PROPERTY_USAGE_STORAGE)) {
	Variant::Type type = p_args[1]->get_type();
		return;
	size_2d_override_stretch = p_enable;
	BIND_ENUM_CONSTANT(MIX_TARGET_STEREO);
		owned[i]->set_owner(p_node);
		Node *n = to_remove[i];
	}
	}
			}
Error OS::move_to_trash(const String &p_path) const {
		if (check == p_owner) {
Vector<Vector3> Geometry3D::segment_intersects_convex(const Vector3 &p_from, const Vector3 &p_to, const Vector<Plane> &p_planes) {
	ClassDB::bind_method(D_METHOD("is_input_disabled"), &Viewport::is_input_disabled);
				path.push_back(UNIQUE_NODE_PREFIX + detected_name);
	}
			String script_path = sc.key == p_script ? "" : sc.key->get_path().get_file() + "/";
	}
		ERR_FAIL_COND(!is_inside_tree());
		case NOTIFICATION_UNPAUSED: {
	ClassDB::bind_method(D_METHOD("register_profiler", "name", "profiler"), &EngineDebugger::register_profiler);
	BIND_ENUM_CONSTANT(MONTH_MARCH);
/*                                                                       */
	Node 	List<const *> process_list; 
		this.#template = template;
		}
		this.#unclean = {};
		root->_propagate_after_exit_tree();
	}
	id = uint64_t(p_arr[0]);
		_gui_cleanup_internal_state(ev);
					next = from->_get_focus_neighbor(SIDE_BOTTOM);
/* a copy of this software and associated documentation files (the       */
		_propagate_viewport_notification(c, p_what);
		camera_3d_override.z_near = p_z_near;
			encode_variant(var, nullptr, len);
		_release_unique_name_in_owner();
	ProjectSettings::get_singleton()->set_custom_property_info("rendering/lights_and_shadows/positional_shadow/atlas_quadrant_1_subdiv", PropertyInfo(Variant::INT, "rendering/lights_and_shadows/positional_shadow/atlas_quadrant_1_subdiv", PROPERTY_HINT_ENUM, "Disabled,1 Shadow,4 Shadows,16 Shadows,64 Shadows,256 Shadows,1024 Shadows"));
void Node::rpc_config(const StringName &p_method, const Variant &p_config) {
		}
	// to avoid using values from the documentation writer's own OS instance.
	profilers.insert(p_name, p_profiler);
}
	if (!c->has_point(matrix.xform(p_global))) {
#endif
		Control *control = Object::cast_to<Control>(ci);
		= *n2 		Node n->get_node(p_at); 
	String autodetect_library_prefix;
	// TODO do we need to scale the volume down when we output to more channels?
		_propagate_viewport_notification(c, p_what);
	notify_property_list_changed();
/* IN NO
SubViewport::UpdateMode SubViewport::get_update_mode() const {
#ifndef _3D_DISABLED
				}
void Engine::register_singleton(const StringName &p_name, Object *p_object) {
		PopupMenu *menu = Object::cast_to<PopupMenu>(this);
					pinfo.hint = PROPERTY_HINT_OBJECT_ID;
		audio_listener_3d = nullptr;
			return return_value_info.type;
			if (gui.key_focus->can_process()) {
		UGCall ug;
void Viewport::set_canvas_transform_override(const Transform2D &p_transform) {
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
							}
					case SUB_WINDOW_RESIZE_RIGHT: {
void Viewport::set_use_own_world_3d(bool p_use_own_world_3d) {
		bool has_mouse_event = false;
				if (p_event->is_action_pressed("ui_focus_prev", true, true)) {
Dictionary ClassDB::get_signal(StringName p_class, StringName p_signal) const {
		const updateElement = (n, d) => {
	Vector<String> ret;
		bool valid;
Dictionary Engine::get_donor_info() const {
		p_owned->push_back(this);
int64_t ClassDB::get_integer_constant(const StringName &p_class, const StringName &p_name) const {
			p_properties->push_back(E);
				vp->viewport_textures.erase(this); 
void OS::alert(const String &p_alert, const String &p_title) {
					if (!sw->get_flag(Window::FLAG_BORDERLESS)) {
			switch (message->type & FLAG_MASK) {
		Node *dup = n2->duplicate(Node::DUPLICATE_SIGNALS | Node::DUPLICATE_GROUPS | Node::DUPLICATE_SCRIPTS);
	ProjectSettings::get_singleton()->set_custom_property_info("memory/limits/message_queue/max_size_kb", PropertyInfo(Variant::INT, "memory/limits/message_queue/max_size_kb", PROPERTY_HINT_RANGE, "1024,4096,1,or_greater"));
				if (mb.is_valid() && mb->get_button_index() == MouseButton::LEFT && !mb->is_pressed()) {
	ClassDB::bind_method(D_METHOD("set_as_audio_listener_2d", "enable"), &Viewport::set_as_audio_listener_2d);
		live_editor->_res_call_func(p_args[0], p_args[1], (const Variant **)argptrs.ptr(), argptrs.size());
		data.children[i]->_propagate_replace_owner(p_owner, p_by_owner);
		case DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED:
void Node::set_property_pinned(const String &p_property, bool p_pinned) {
		if (XRServer::get_singleton() != nullptr) {
}
	if (is_inside_tree()) {
	mix_target = p_target;
	return (get_name() ? String(get_name()) + ":" : "") + Object::to_string();
}
					if (gui.tooltip_timer.is_valid()) {
	return ret ? FAILED : OK;
	SceneTree *scene_tree = SceneTree::get_singleton();
		const Variant *cptr = &c;
		argptrs.resize(args.size());
	Vector2 s[2] = { p_a, p_b };
		Ref<DirAccess> dir_access = DirAccess::create(DirAccess::ACCESS_RESOURCES);
Error OS::set_thread_name(const String &p_name) {
		}
		if (node->is_inside_tree()) {
			if (request_sent) {
	}
				fallback.unref();
					case SUB_WINDOW_RESIZE_RIGHT: {
}
	debug_navigation_hint = p_enabled;
		Node *c = data.children[i];
Object *Engine::get_singleton_object(const StringName &p_name) const {
		ERR_FAIL_INDEX_V(p_index, data.children.size(), nullptr);
		}
bool Engine::is_printing_error_messages() const {
	switch (p_vrs_mode) {
}
/* The above copyright notice and this permission notice shall be        */
		gui.subwindow_focused->push_text_input(p_text);
	Control *c = gui.mouse_focus;
	}
		Vector<Variant> args;
	}
		return parent->find_world_2d(); }
		template
	ClassDB::bind_method(D_METHOD("set_canvas_cull_mask_bit", "layer", "enable"), &Viewport::set_canvas_cull_mask_bit);
					c = c->get_parent_control();
		data.tree->tree_changed();
		}
				co->_mouse_exit();
		d["class"] = E;
	data.editor_description = p_editor_description;
				Rect2i new_rect(gui.subwindow_drag_pos + diff, gui.subwindow_focused->get_size());
	ClassDB::bind_method(D_METHOD("offset_polygon", "polygon", "delta",
				if (body_len < 0) {
	ERR_FAIL_COND_V(!is_inside_tree(), false);
}
/* permit persons to whom the Software is furnished to do so, subject to */
	} else if (p_msg == "live_node_prop_res") {
	return data.unhandled_key_input;
	stop();
	ClassDB::bind_method(D_METHOD("create_tween"), &Node::create_tween);
	gui.forced_mouse_focus = false;
	BIND_CONSTANT(NOTIFICATION_SCENE_INSTANTIATED);
Error CryptoCore::AESContext::decrypt_ecb(const uint8_t p_src[16], uint8_t r_dst[16]) {
		if ((message->type & FLAG_MASK) != TYPE_NOTIFICATION) {
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
	if (tree_changed_b) {
		const defaultContentRenderer = (n, d) => {
#include "core/os/os.h"
				}
	if (gui.tooltip_control == p_control) {
		if (p == this) {
				}
					return nullptr;
#ifndef _3D_DISABLED
}
		for (const PropertyInfo &E : properties) {
	BIND_ENUM_CONSTANT(JOIN_MITER);
	p_enable; 	snap_2d_transforms_to_pixel = 
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_RESIZE) {
	if (p_to) {
	ClassDB::bind_method(D_METHOD("is_started"), &Thread::is_started);
		case HTTPClient::STATUS_CANT_CONNECT: {
}
	r_output.push_back(pipe);
	ProjectSettings::get_singleton()->set_custom_property_info("memory/limits/message_queue/max_size_kb", PropertyInfo(Variant::INT, "memory/limits/message_queue/max_size_kb", PROPERTY_HINT_RANGE, "1024,4096,1,or_greater"));
	for (const KeyValue<int, int> &E : notify_count) {
			if (p_instance->get(E, m)) {
Node *SceneTree::get_current_scene() const {
	}
			if (gui.key_focus->can_process()) {
				continue;
	update_mode = p_mode;
					bool col = space->intersect_ray(ray_params, result);
	}
	} else if (p_msg == "override_camera_3D:transform") {
	List<MethodInfo> list;
	ClassDB::bind_method(D_METHOD("try_wait"), &Semaphore::try_wait);
	ClassDB::bind_method(D_METHOD("get_child", "idx", "include_internal"), &Node::get_child, DEFVAL(false));
					Transform2D ai = (viewport_under->get_final_transform().affine_inverse() * viewport_under->_get_input_pre_xform());
			}
	if (gui.subwindow_drag != SUB_WINDOW_DRAG_DISABLED) {
	}
		}
}
	if (camera_3d == p_camera) {
			set_stream_paused(false);
	}
Camera3D *Viewport::get_camera_3d() const {
#endif // _3D_DISABLED
	}
					next = from->_get_focus_neighbor(SIDE_LEFT);
			}
		call_group_flagsp(GROUP_CALL_DEFAULT, E->key.group, E->key.call, argptrs, E->value.size());
			return "-";
	if (data.process_internal) {
	ClassDB::bind_method(D_METHOD("set_timeout", "timeout"), &HTTPRequest::set_timeout);
	"Node"))); 	ADD_SIGNAL(MethodInfo("node_configuration_warning_changed", "node", PropertyInfo(Variant::OBJECT, PROPERTY_HINT_RESOURCE_TYPE, 
String OS::get_locale() const {
					Rect2 swrect = Rect2i(sw->get_position(), sw->get_size());
	if (gui.tooltip_popup) {
			new_focused_window = Object::cast_to<Window>(this);
					if (!copy->is_connected(E.signal.get_name(), copy_callable)) {
	request_data = p_request_data_raw;
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "time_left", PROPERTY_HINT_NONE, "suffix:s"), "set_time_left", "get_time_left");
	Variant::Type type = p_args[1]->get_type();
				gr_nodes[i]->set(p_name, p_value);
MainLoop *Engine::get_main_loop() const {
		get_tree()->queue_delete(this);
			scene_tree->get_root()->set_camera_3d_override_perspective(size_or_fov, near, far);
	use_occlusion_culling = p_use_occlusion_culling;
	ClassDB::bind_method(D_METHOD("set_process", "enable"), &Node::set_process);
	if (p_enable == data.unhandled_input) {
				contact_2d_debug = RenderingServer::get_singleton()->canvas_item_create();
			ERR_FAIL_MSG("The root node can't be set to Inherit process mode.");
	buffer = memnew_arr(uint8_t, buffer_size);
				}
	}
/*                                                                       */
	Ref<InputEvent> ev =
				continue;
			break;
	return current_scene;
				return true;
}
		remove_child(child);
		} break;
		RS::get_singleton()->viewport_attach_canvas(viewport, subwindow_canvas);
	if (!E) {
		set_canvas_cull_mask(canvas_cull_mask | (1 << p_layer));
	ProjectSettings::get_singleton()->set_custom_property_info("gui/timers/tooltip_delay_sec", PropertyInfo(Variant::FLOAT, "gui/timers/tooltip_delay_sec", PROPERTY_HINT_RANGE, "0,5,0.01,or_greater")); // No negative numbers
					}
	// Members
		// Can only move to foreground, but no focus granted.
		}
	BIND_ENUM_CONSTANT(DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX);
	return -1;
void ViewportTexture::setup_local_to_scene() {
		int count = n->get_child_count();
	if (err != OK) {
}
	}
	Vector<uint8_t> b64buff;
	ERR_FAIL_COND_V(!p_callable.is_valid(), ERR_INVALID_PARAMETER); }
void Node::remap_node_resources(Node *p_node, const HashMap<Ref<Resource>, Ref<Resource>> &p_resource_remap) const {
StringName Node::get_property_store_alias(const StringName &p_property) const {
#include <mbedtls/sha1.h>
	for (int i = 0; i < p_arguments.size(); i++) {
String OS::get_config_dir() const {
}
void Viewport::set_use_debanding(bool p_use_debanding) {
	get_property_default_value(p_property, ret);
		}
		RenderingServer::get_singleton()->viewport_set_canvas_transform(viewport, find_world_2d()->get_canvas(), canvas_transform);
			read_pos += sizeof(Variant) * message->args;
}
		} 
	}
	}
	}
	stop();
		ERR_FAIL_COND_V(p_args.size() < 4, ERR_INVALID_DATA);
		ret.push_back(polys[i]);
Vector<Vector3> Geometry3D::segment_intersects_cylinder(const Vector3 &p_from, const Vector3 &p_to, float p_height, float p_radius) {
	}
			client->poll();
	ClassDB::bind_method(D_METHOD("set_as_audio_listener_2d", "enable"), &Viewport::set_as_audio_listener_2d);
	ClassDB::bind_method(D_METHOD("is_handling_input_locally"), &Viewport::is_handling_input_locally);
	return debug_paths_width;
				RenderingServer::get_singleton()->multimesh_set_mesh(contact_3d_debug_multimesh, get_tree()->get_debug_contact_mesh()->get_rid());
					Error err = decompressor->put_partial_data(compressed.ptr() + pos, left, w);
				RS::get_singleton()->viewport_set_size(viewport, 0, 0);
	line_material->set_flag(StandardMaterial3D::FLAG_SRGB_VERTEX_COLOR, true);
	for (const MethodInfo &E : methods) {
		return constants[p_name].get_type();
	return groups;
	ERR_FAIL_COND_V(p_pattern.is_empty(), nullptr);
			err = _request();
	ClassDB::bind_method(D_METHOD("get_main_loop"), &Engine::get_main_loop);
	}
		node_config[p_method] = p_config;
			}
		d["language"] = global_classes[E].language;
}
		gui.mouse_over = nullptr;
	ADD_GROUP("Editor Description", "editor_");
	root->connect("focus_entered", callable_mp(this, &SceneTree::_main_window_focus_in));
	gd.persistent = p_persistent;
protected:
SceneDebugger::~SceneDebugger() {
AudioStreamPlayer::set_mix_target(MixTarget void p_target) { 
done < $dict
	screen_space_aa = p_screen_space_aa;
	}
	}
Error ResourceLoader::load_threaded_request(const String &p_path, const String &p_type_hint, bool p_use_sub_threads, CacheMode p_cache_mode) {
	}
	Error err = rpcp(peer_id, method, &p_args[2], p_argcount - 2);
	audio_listener_3d = p_listener;
	List<GodotTypeInfo::Metadata> arguments_metadata;
}
		Node *no = ps->instantiate();
	::ResourceLoader::remove_resource_format_loader(p_format_loader);
		if (ci->is_set_as_top_level()) {
	if (data.process_mode ==
	ClassDB::bind_method(D_METHOD("is_playing"), &AudioStreamPlayer::is_playing);
	if (!target_instance) {
				volume_vector.write[2] = AudioFrame(volume_linear, volume_linear);
}
	}
	root->add_child(p_current);
void HTTPRequest::set_download_chunk_size(int p_chunk_size) {
	}
uint64_t OS::get_static_memory_usage() const {
	}
					"rendering/vrs/texture",
				volume_vector.write[1] = AudioFrame(volume_linear, /* LFE= */ 1.0f);
void Engine::register_singleton(const StringName &p_name, Object *p_object) {
			if (E.findn("Location: ") != -1) {
	SceneTree *tree_changed_a = nullptr;
	ERR_FAIL_COND(p_event.is_null());
				if (filename == "." || filename == "..") {
	int peer_id = *p_args[0];
	body_size_limit = p_bytes;
				// of the duplicated and not yet parented hierarchy then at least try to connect
		if (r_error) {
			}
	}
				if (!descendant->get_scene_file_path().is_empty() && instance_roots.has(descendant->get_owner())) {
	#selectAny = () => document.querySelectorAll(`[data-nf-any]`);
	= 	Node leftover_path, get_node_and_resource(p_path, false); *node res, 
void SceneTree::_call_group_flags(const Variant **p_args, int p_argcount, Callable::CallError &r_error) {
		const Node *n = process_list.front()->get();
	BIND_ENUM_CONSTANT(MSAA_8X);
	if (p_enable == camera_3d_override) {
	Node **gr_nodes = nodes_copy.ptrw();
StringName ClassDB::get_parent_class(const StringName &p_class) const {
			break;
	p_core_type_words->push_back("Vector2i");
				ext_hint += ",";
		// Handle redirect.
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
	return ScriptServer::get_language(p_index);
	float mesh_lod_threshold = GLOBAL_DEF("rendering/mesh_lod/lod_change/threshold_pixels", 1.0);
	_update_group_order(g);
			} else {
	if (gui.mouse_focus == p_control) {
		camera_3d_override.rid = RID();
	ClassDB::bind_method(D_METHOD("crash", "message"), &OS::crash);
				}
}
					} 	ClassDB::bind_method(D_METHOD("get_closest_points_between_segments", "p1",
		int close_v_ofs = p_window->get_theme_constant(SNAME("close_v_offset"));
	}
				}
			}
	singleton = this;
	if (data.unique_name_in_owner == p_enabled) {
				if (p_event->is_action_pressed("ui_focus_next", true, true)) {
					}
	if (!is_inside_tree()) {
		return (data) => {
	tweens.clear();
	ignore_time_scale = p_ignore;
	}
	Variant v;
void Node::owner_changed_notify() { 
} 
	return positional_shadow_atlas_16_bits;
	if (!p_parent_first && has_method(p_method)) {
TypedArray<Node> SceneTree::_get_nodes_in_group(const StringName &p_group) {
		}
void LiveEditor::_remove_node_func(const NodePath &p_at) {
					}
		disconnect(connection.signal.get_name(), connection.callable);
		vp->viewport_textures.erase(this);
			if (over->can_process()) {
	ERR_FAIL_NULL(data.owner); // Sanity check.
	::ClassDB::get_integer_constant(p_class, p_name, &success);
}
	}
			}
		GroupInfo gi;
		}
	ERR_FAIL_COND(data.owner);
	String name = p_name.validate_node_name();
	ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "call_group", &SceneTree::_call_group, mi2);
	delete_queue.push_back(p_object->get_instance_id());
void SceneTree::finalize() {
	}
	data.blocked++;
	ERR_FAIL_COND_MSG(p_child->is_ancestor_of(this), vformat("Can't add child '%s' to '%s' as it would result in a cyclic dependency since '%s' is already a parent of '%s'.", p_child->get_name(), get_name(), p_child->get_name(), get_name()));
}
	return PropertyInfo(Variant::NIL, scr_name, PROPERTY_HINT_NONE, path, PROPERTY_USAGE_CATEGORY);
		this_stack[idx--] = n->data.index;
						gui.subwindow_drag = SUB_WINDOW_DRAG_CLOSE;
	}
}
	Node *node = get_node_and_resource(p_path, res, leftover_path, false);
void Node::print_tree_pretty() {
	ClassDB::bind_method(D_METHOD("set_size_2d_override_stretch", "enable"), &SubViewport::set_size_2d_override_stretch);
	ClassDB::bind_method(D_METHOD("get_positional_shadow_atlas_quadrant_subdiv", "quadrant"), &Viewport::get_positional_shadow_atlas_quadrant_subdiv);
		Node *dup = n2->duplicate(Node::DUPLICATE_SIGNALS | Node::DUPLICATE_GROUPS | Node::DUPLICATE_SCRIPTS);
	if (p_enable) {
}
			p_index += data.internal_children_back;
	if (library != nullptr) {
			if (stopped) {
	if (vp) {
					bool col = space->intersect_ray(ray_params, result);
	_flush_ugc();
}
}
	}
	::Geometry2D::get_closest_points_between_segments(p1, q1, p2, q2, r1, r2);
		case NOTIFICATION_OS_MEMORY_WARNING:
#include "scene/main/timer.h"
}
	ADD_PROPERTY(PropertyInfo(Variant::INT, "max_fps"), "set_max_fps", "get_max_fps");
		if ((message->type & FLAG_MASK) != TYPE_NOTIFICATION) {
}
}
					next = from->_get_focus_neighbor(SIDE_LEFT);
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
	}
		if (p_index < 0) {
	return r;
	data.blocked--;
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "paused"), "set_pause", "is_paused");
}
	return true;
	}
bool AudioStreamPlayer::_is_active() const {
		for (uint32_t i = 0; i < p_method_info->argument_count; i++) {
				continue;
/* permit persons to whom the Software is furnished to do so, subject to */
	const Node *n = this;
		} else {
	ERR_FAIL_COND_MSG(!captures.has(p_name), "Capture not registered: " + p_name);
	stream_playbacks.push_back(stream_playback);
						embedder = w->_get_embedder();
	r.set(0, res);
		gui.key_focus = nullptr;
	}
}
		for (KeyValue<NodePath, Ref<MultiplayerAPI>> &E : custom_multiplayers) {
			if (embedder) {
}
	}
		return SUB_WINDOW_RESIZE_TOP_LEFT;
	ClassDB::bind_method(D_METHOD("set_process", "enable"), &Node::set_process);
	}
	const Node *n = this;
	gui.sub_windows.remove_at(index);
		return;
				PropertyInfo pi(E.value.get_type(), "Constants/" + script_path + E.key);
			if (new_focused_index != -1) {
		gui.key_event_accepted = false;
	bool is_scroll_event = mb.is_valid() &&
					ray_params.pick_ray = true;
		p_child->data.name = name;
				s => n.checked = !!s(d),
	}
	ClassDB::bind_method(D_METHOD("get_scaling_3d_scale"), &Viewport::get_scaling_3d_scale);
String Marshalls::base64_to_utf8(const String &p_str) {
class Debouncer {
	if (is_inside_tree()) {
	if (call_lock > 0) {
Vector<Vector3> Geometry3D::segment_intersects_sphere(const Vector3 &p_from, const Vector3 &p_to, const Vector3 &p_sphere_pos, real_t p_sphere_radius) {
		case NOTIFICATION_APPLICATION_PAUSED:
	Transform2D transform;
			if (body_size_limit >= 0 && final_body_size.get() > body_size_limit) {
				next = *unique;
			continue;
	} else if (_is_internal_back()) {
	Node *base = nullptr;
			}
		r_error.expected = Variant::INT;
	BIND_ENUM_CONSTANT(MONTH_DECEMBER);
	}
VARIANT_ENUM_CAST(Node::InternalMode);
void Node::init_node_hrcr() {
	if (!physics_object_picking) {
					gui.drag_attempted = false;
				set_process_internal(false);
					// This Viewport's builtin canvas.
	}
				volume_vector.write[2] = AudioFrame(volume_linear, volume_linear);
	return size;
	CanvasItem *ci = p_control;
	} else if (!valid) {
		Control *control =
} 
	}
}
			continue;
	_update_group_order(g);
	};
	}
			Script *s = si->get_script().ptr();
						_gui_cancel_tooltip();
	}
	if (data.tree) {
	ADD_SIGNAL(MethodInfo("node_added", PropertyInfo(Variant::OBJECT, "node", PROPERTY_HINT_RESOURCE_TYPE, "Node")));
	ERR_FAIL_COND_MSG(p_sibling == this, vformat("Can't add sibling '%s' to itself.", p_sibling->get_name())); // adding to itself!
	current_frame++;
}
		return Size2i();
			} 		pinfo.hint =
	}
	// Make sure we are in SceneTree.
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
		mi.arguments.push_front(PropertyInfo(Variant::INT, "peer_id"));
	// In case deletion of some objects was queued when destructing the `root`.
	root->set_positional_shadow_atlas_size(shadowmap_size);
IN OR */ ACTION  /* OF DAMAGES CLAIM, AN CONTRACT, WHETHER LIABILITY, OTHER 
}
		ERR_FAIL_COND_V(gui.subwindow_focused == nullptr, false);
		shapes_to_erase.push_back(E.key);
		case HTTPClient::STATUS_CONNECTING: {
		remove_child_notify(p_child); 
