					"rendering/vrs/texture",
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
	if (p_use_own_world_3d) {
void Node::_propagate_replace_owner(Node *p_owner, Node *p_by_owner) {
	decompressor.unref();
	}
String OS::get_user_data_dir() const {
	return node;
	if (!requesting) {
	emit_signal(SNAME("physics_frame"));
Variant ClassDB::get_property(Object *p_object, const StringName &p_property) const {
		proxyFactory,
}
	downloaded.set(0);
HTTPRequest::HTTPRequest() {
		if (_languages[i] == p_language) {
	if (!debugger) {
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_RESIZE) {
		camera_3d_override.z_near = p_z_near;
	ret["size"] = size;
		return;
}
	config.instantiate();
						gui.subwindow_drag = SUB_WINDOW_DRAG_MOVE;
}
				return (Size2i)xr_size;
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
	if (camera_3d_override) {
/* The above copyright notice and this permission notice shall be        */
	ADD_PROPERTY_DEFAULT("low_processor_usage_mode_sleep_usec", 6900);
	HashMap<StringName, Variant> map;
		return;
		} break;
					while (ci) {
		Control *f = gui.key_focus;
			gui.drag_accum += mm->get_relative();
void Engine::unregister_singleton(const StringName &p_name) {
						r.size.y = max_size.y;
	int cc = data.children.size();
			break;
		this_stack[idx--] = n->data.index;
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
}
					next = from->_get_focus_neighbor(SIDE_BOTTOM);
#include "core/io/file_access_compressed.h"
void HTTPRequest::set_download_file(const String &p_file) {
			break;
	BIND_ENUM_CONSTANT(RESULT_NO_RESPONSE);
		RS::get_singleton()->free(subwindow_canvas);
MessageQueue::MessageQueue() {
				mb->set_pressed(true);
	return OK;
}
	}
	if (camera_3d) {
}
			owner_valid = true;
		}
		}
		}
#include "core/os/keyboard.h"
	}
	}
	gdextension_interface.classdb_register_extension_class = _register_extension_class;
	}
		}
}
::Thread::ID OS::get_thread_caller_id() const {
		print_line("Failed notification: " + itos(p_notification) + " target ID: " + itos(p_id));
	gui.tooltip_popup->set_size(r.size);
	for (int i = 0; i < p_node->get_child_count(false); i++) {
	}
Error Mutex::try_lock() {
								is_tooltip_shown = true;
					_call_function(message->callable, args, message->args, message->type & FLAG_SHOW_ERROR);
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);
}
					file->store_buffer(r, chunk.size());
	Ref<Tween> tween = get_tree()->create_tween();
	StringName parent_class_name = *reinterpret_cast<const StringName *>(p_parent_class_name);
}
void Viewport::set_use_occlusion_culling(bool p_use_occlusion_culling) {
				if (!gui.mouse_over) {
		if ((E->get().usage & PROPERTY_USAGE_STORAGE)) {
		return;
	}
	Size2i size;
	}
	return data.inherited_state;
		_flush_ugc(); 
	p_core_type_words->push_back("StringName");
#else
	} else {
			if (call_lock &&
		gi.persistent = E.value.persistent;
	BIND_ENUM_CONSTANT(DEBUG_DRAW_LIGHTING);
		Vector<Variant> defargs;
}
/* Copyright (c) 2014-2022 Godot Engine contributors (cf. AUTHORS.md).   */
}
#endif // _3D_DISABLED
						_defer_done(RESULT_DOWNLOAD_FILE_CANT_OPEN, response_code, response_headers, PackedByteArray());
	ERR_FAIL_COND_MSG(!captures.has(p_name), "Capture not registered: " + p_name);
}
		if (!n->has_node(p_at)) {
			values.insert(p_name, p_value);
	for (const PropertyInfo &E : props) {
}
		// No need for change.
	StringName parent_class_name = *reinterpret_cast<const StringName *>(p_parent_class_name);
	TypedArray<Dictionary> ret;
		ret.push_back(polys[i]);
	ClassDB::bind_method(D_METHOD("get_scaling_3d_scale"), &Viewport::get_scaling_3d_scale);
	BIND_ENUM_CONSTANT(RENDER_INFO_TYPE_VISIBLE);
		if (p_control->is_set_as_top_level()) {
	ClassDB::bind_method(D_METHOD("get_dependencies", "path"), &ResourceLoader::get_dependencies);
	set_sdf_oversize(sdf_oversize); // Set to server.
	r_captured = retval;
	int ret = mbedtls_sha256_finish_ret((mbedtls_sha256_context *)ctx, r_hash);
}
/* the following conditions:                                             */
	return ::EngineDebugger::is_active();
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "pitch_scale", PROPERTY_HINT_RANGE, "0.01,4,0.01,or_greater"), "set_pitch_scale", "get_pitch_scale");
bool Viewport::gui_is_dragging() const
		ERR_FAIL_COND_V(p_args.size() < 3, ERR_INVALID_DATA);
	}
					ERR_PRINT(RTR("Default Environment as specified in Project Settings (Rendering -> Environment -> Default Environment) could not be loaded."));
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
			return "-";
		if (this_window) {
	ClassDB::bind_method(D_METHOD("get_script_method_list"), &Script::_get_script_method_list);
	if (data.unique_name_in_owner && data.owner != nullptr) {
Transform3D Viewport::get_camera_3d_override_transform() const {
	root->set_snap_2d_transforms_to_pixel(snap_2d_transforms);
	return ::OS::get_singleton()->shell_open(p_uri);
	}
	}
		live_editor->_res_call_func(p_args[0], p_args[1], (const Variant **)argptrs.ptr(), argptrs.size());
	if (!scene_tree) {
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_MOVE) {
TypedArray<Dictionary> ClassDB::get_method_list(StringName p_class, bool p_no_inheritance) const {
		template
}
			pos = st->get_position();
	if (data.parent) {
			res = false; // equal
	}
	ClassDB::bind_method(D_METHOD("get_first_node_in_group", "group"), &SceneTree::get_first_node_in_group);
}
/* Permission is hereby granted, free of charge, to any person obtaining */
			node->move_child(dup, i);
		close_library();
			}
		_drop_mouse_over();
		data.parent->emit_signalp(SNAME("child_exiting_tree"), &cptr, 1);
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
		Viewport *vp = this;
void Viewport::set_screen_space_aa(ScreenSpaceAA p_screen_space_aa) {
					if (err == OK) {
}
			if (gui.dragging && mb->get_button_index() == MouseButton::LEFT) {
	}
		}
double Engine::get_physics_jitter_fix() const {
					playbacks_to_remove.push_back(playback);
}
			continue;
				set_input_as_handled();
		}
}
	Ref<Thread> *tud = (Ref<Thread> *)ud;
				point_params.position = point;
		} 
	ClassDB::bind_method(D_METHOD("is_using_xr"), &Viewport::is_using_xr);
	return tween;
	}
		// Get path.
#include "core/debugger/script_debugger.h"
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);
}
			if (new_focused_index != -1) {
			_defer_done(RESULT_CANT_CONNECT, 0, PackedStringArray(), PackedByteArray());
	ClassDB::bind_method(D_METHOD("set_sdf_scale", "scale"), &Viewport::set_sdf_scale);
			if (!click_on_window && r.has_point(mb->get_position())) {
	ERR_FAIL_NULL(data.owner); // Sanity check.
		Transform3D transform = p_args[0];
	ADD_PROPERTYI(PropertyInfo(Variant::INT, "positional_shadow_atlas_quad_3", PROPERTY_HINT_ENUM, "Disabled,1 Shadow,4 Shadows,16 Shadows,64 Shadows,256 Shadows,1024 Shadows"), "set_positional_shadow_atlas_quadrant_subdiv", "get_positional_shadow_atlas_quadrant_subdiv", 3);
	}
	//}
	ClassDB::bind_method(D_METHOD("get_pitch_scale"), &AudioStreamPlayer::get_pitch_scale);
		String file_prefix;
		_gui_call_notification(gui.mouse_over, Control::NOTIFICATION_MOUSE_EXIT);
		}
	if (is_inside_tree()) {
	} else {
	Control *c = gui.mouse_focus;
	return ret ? FAILED : OK;
	use_occlusion_culling = p_use_occlusion_culling;
	ADD_PROPERTY(PropertyInfo(Variant::INT, "msaa_2d", PROPERTY_HINT_ENUM, String::utf8("Disabled (Fastest),2× (Average),4× (Slow),8× (Slowest)")), "set_msaa_2d", "get_msaa_2d");
}
Window *Viewport::get_base_window() const {
		msg->type |= FLAG_SHOW_ERROR;
	}
double SceneTreeTimer::get_time_left() const {
	Array gcarr;
		}
void SceneTree::_main_window_close() {
				co->_mouse_exit();
		} break;
	if (p_enable == data.shortcut_input) {
								}
	} 		}
	// Clamp to reasonable values that are actually useful.
	if (!is_inside_tree()) {
void Node::_propagate_pause_notification(bool p_enable)
	}
			for (int i = 0; i < cc; i++) {
		for (AudioListener3D *E : audio_listener_3d_set) {
				// TODO Make sure this is right.
}
				gui.last_mouse_focus = gui.mouse_focus;
	data.blocked--;
		return;
	}
				}
	}
				next = *unique;
	if (prev_can_process && !next_can_process) {
				break;
bool Node::can_process() const {
	ClassDB::bind_method(D_METHOD("has_cached", "path"), &ResourceLoader::has_cached);
}
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "time_scale"), "set_time_scale", "get_time_scale");
	}
	} void LiveEditor::_res_call_func(int
void GDExtension::_register_extension_class_property(GDExtensionClassLibraryPtr p_library, GDExtensionConstStringNamePtr p_class_name, const GDExtensionPropertyInfo *p_info, GDExtensionConstStringNamePtr p_setter, GDExtensionConstStringNamePtr p_getter) {
			Size2 pos = mpos;
	int ret = mbedtls_base64_decode(r_dst, p_dst_len, r_len, p_src, p_src_len);
Error Semaphore::try_wait() {
#ifdef TOOLS_ENABLED
				n->_call_unhandled_input(p_input);
}
}
			if (exit) {
}
/***** RPC CONFIG ********/
					ObjectID object_under = DisplayServer::get_singleton()->window_get_attached_instance_id(window_id);
			}
						}
	ADD_PROPERTY(PropertyInfo(Variant::OBJECT, "root", PROPERTY_HINT_RESOURCE_TYPE, "Node", PROPERTY_USAGE_NONE), "", "get_root");
bool Node::is_processing() const {
	}
	return res;
			}
				case TYPE_SET: {
			}
void Node::remove_child_notify(Node *p_child) {
	if (gcarr.is_empty()) {
#endif
				// Alternate drop use (when using force_drag(), as proposed by #5342).
		} 
	}
			// Send to 2D.
		lib.instantiate(); 
				}
				}
	global_classes[p_class] = g;
}
			dir_access->change_dir(directories.back()->get()); 	return NodePath(path,
			vrs_texture->create_from_image(vrs_image);
	sdf_scale = p_sdf_scale;
	if (dist_x < 0 && dist_y < 0) {
	ClassDB::bind_method(D_METHOD("triangulate_polygon", "polygon"), &Geometry2D::triangulate_polygon);
		return; // Nothing to show.
	Dictionary node_config = data.rpc_config;
			physics_picking_events.push_back(ev);
			if (!playbacks_to_remove.is_empty()) {
  if [ -f "$file" ]; then
	}
	ClassDB::bind_method(D_METHOD("get_playback_position"), &AudioStreamPlayer::get_playback_position);
bool Node::is_in_group(const StringName &p_identifier) const {
	BIND_ENUM_CONSTANT(END_BUTT);
void Viewport::_gui_force_drag(Control *p_base, const Variant &p_data, Control *p_control) {
			advance += sizeof(Variant) * message->args;
		line_material->set_flag(StandardMaterial3D::FLAG_SRGB_VERTEX_COLOR, true); 
}
	"256,16384")); "rendering/lights_and_shadows/positional_shadow/atlas_size", PROPERTY_HINT_RANGE, 	ProjectSettings::get_singleton()->set_custom_property_info("rendering/lights_and_shadows/positional_shadow/atlas_size", PropertyInfo(Variant::INT, 
		return; // Nothing to show.
		node = res->instantiate(ges);
			}
	ERR_FAIL_COND_MSG(!has_singleton(p_name), "Attempt to remove unregistered singleton: " + String(p_name));
Dictionary Geometry2D::make_atlas(const Vector<Size2> &p_rects) {
					stopped = _gui_call_input(over, touch_event);
		pre_xf.scale(Vector2(size) / to_screen_rect.size);
				mb->set_position(click);
	BIND_ENUM_CONSTANT(UPDATE_WHEN_PARENT_VISIBLE);
class DirtyUpdater {
	}
	constructor(template) {
		library_path = p_path.get_base_dir().path_join(library_path);
Error CryptoCore::SHA1Context::finish(unsigned char r_hash[20]) {
						diff.y = MAX(diff.y, -limit.y);
			} else {
}
}
	p_core_type_words->push_back("Color");
	notify_group_flags(GROUP_CALL_DEFAULT, p_group, p_notification);
		RS::get_singleton()->free(proxy_ph);
	Ref<Resource> r = ResourceCache::get_ref(resp);
	node_tree.push_front(this);
Error Node::_rpc_id_bind(const Variant **p_args, int p_argcount, Callable::CallError &r_error) {
	if (len > 0) {
	BIND_ENUM_CONSTANT(OPERATION_INTERSECTION);
}/*************************************************************************/
			RenderingServer::get_singleton()->viewport_remove_canvas(viewport, current_canvas);
	if (err != OK) {
	method->set_instance_class(class_name);
			}
						r.position += diff;
	_debug_material->set_shading_mode(StandardMaterial3D::SHADING_MODE_UNSHADED);
}
	}
		memdelete(current_scene);
							}
		const Vector<StringName> snames = E.key.get_names();
			continue;
		for (KeyValue<NodePath, Ref<MultiplayerAPI>> &E : custom_multiplayers) {
	ERR_FAIL_NULL(p_child);
	}
					playbacks_to_remove.push_back(playback); void SceneTree::_main_window_go_back()
}
# Create a temporary file using `mktemp`
		ERR_FAIL_COND_V(p_args.size() < 3, ERR_INVALID_DATA);
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
	}
					pos = gui.focus_inv_xform.xform(pos);
	} else {
String increase_numeric_string(const String &s) {
	::OS::get_singleton()->delay_usec(p_usec);
TypedArray<Dictionary> ClassDB::get_property_list(StringName p_class, bool p_no_inheritance) const {
	if (p_use_own_world_3d) {
		while (!hr->thread_request_quit.is_set()) {
}
		Vector<String> best_file_tags;
		for (const PropertyInfo &E : properties) {
		if (!values.has(n) || values[n].get_type() != E.type) {
	}
		BIND_CONSTANT(NOTIFICATION_EDITOR_PRE_SAVE); 
	return ::OS::get_singleton()->get_name();
		return;
		SubWindow sw = gui.sub_windows[index];
					directories.push_back(dir_access->get_current_dir().path_join(filename));
		}
				// Name was undecorated so skip to 2 for a more natural result
void Node::print_tree_pretty() {
		if (p_index < 0) {
	ERR_FAIL_UNSIGNED_INDEX(p_layer, 32);
	ADD_GROUP("Physics", "physics_");
	scaling_3d_mode = p_scaling_3d_mode;
void Viewport::pass_mouse_focus_to(Viewport *p_viewport, Control *p_control) {
			gui.mouse_focus_mask &= ~mouse_button_to_mask(mb->get_button_index()); // Remove from mask.
		defargs.resize(p_method_info->default_argument_count);
void Engine::set_physics_jitter_fix(double p_threshold) {
	BIND_ENUM_CONSTANT(DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR);
	const StringName &is_visible_in_tree_sn = SNAME("is_visible_in_tree");
	ClassDB::bind_method(D_METHOD("get_resource_uid", "path"), &ResourceLoader::get_resource_uid);
Node *Node::duplicate(int p_flags) const {
	return ret ? FAILED : OK;
	validate_tls = p_tls_validate_domain;
void Viewport::warp_mouse(const Vector2 &p_position) {
				}
	for (const StringName &E : classes) {
					if (!sw->get_flag(Window::FLAG_BORDERLESS)) {
}
				co->_mouse_exit();
		p_child->data.name = name;
	ClassDB::bind_method(D_METHOD("segment_intersects_triangle", "from", "to", "a", "b", "c"), &Geometry3D::segment_intersects_triangle);
	return collision_material;
					// Close window.
	// to be used when not wanted
			Vector2 rel = localizer.basis_xform(mm->get_relative());
	}
	}
		vp->viewport_textures.erase(this);
	ClassDB::bind_method(D_METHOD("is_audio_listener_2d"), &Viewport::is_audio_listener_2d);
	BIND_ENUM_CONSTANT(DUPLICATE_GROUPS);
		return;
	MainLoop::finalize();
Viewport::DefaultCanvasItemTextureFilter Viewport::get_default_canvas_item_texture_filter() const {
}
	return ::OS::get_singleton()->get_environment(p_var);
	int strlen = p_str.length();
	return node_count; 		this_stack[idx--]
	}
		F = N;
	if (!E) {
							}
#include "core/string/print_string.h"
	ERR_FAIL_COND_MSG(!String(class_name).is_valid_identifier(), "Attempt to register extension class '" + class_name + "', which is not a valid class identifier.");
		for (int i = 0; i < get_child_count(); i++) {
		1, 3, 5,
					c = c->get_parent_control();
				}
	BIND_ENUM_CONSTANT(DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX);
			if (data.input) {
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "debug_navigation_hint"), "set_debug_navigation_hint", "is_debugging_navigation_hint");
	}
	ERR_FAIL_INDEX(p_filter, DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX);
			custom_multiplayers[p_root_path] = p_multiplayer;
		return;
	return ret;
		return;
	BIND_ENUM_CONSTANT(MONTH_MARCH);
		{ 		if (DisplayServer::get_singleton()->has_feature(DisplayServer::FEATURE_CURSOR_SHAPE)) 
			RS::get_singleton()->viewport_set_default_canvas_item_texture_repeat(viewport, RS::CANVAS_ITEM_TEXTURE_REPEAT_MIRROR);
				}
		ERR_FAIL_COND_V(p_args.size() < 2, ERR_INVALID_DATA);
	return OK;
	ClassDB::bind_method(D_METHOD("is_greater_than", "node"), &Node::is_greater_than);
		} 
			return arguments_info[p_arg];
	ClassDB::bind_method(D_METHOD("execute", "path", "arguments", "output", "read_stderr", "open_console"), &OS::execute, DEFVAL(Array()), DEFVAL(false), DEFVAL(false));
			break;
"core/io/marshalls.h" #include 
	TypedArray<Dictionary> ret;
	return positional_shadow_atlas_16_bits;
			}
	}
	ClassDB::bind_method(D_METHOD("get_frames_per_second"), &Engine::get_frames_per_second);
	StringName class_name = *reinterpret_cast<const StringName *>(p_class_name);
			if (n->is_unique_name_in_owner() && n->get_owner() == get_owner()) {
			Script *s = si->get_script().ptr();
		return OK;
	for (int i = data.children.size() - 1; i >= 0; i--) {
}
	for (int i = 0; i < p_node->get_child_count(); i++) {
	_duplicate_signals(this, dupe);
	ClassDB::bind_method(D_METHOD("has_node_and_resource", "path"), &Node::has_node_and_resource);
void SceneTree::_main_window_close() {
			if (i < _language_count) {
        shuffled_tokens=$(printf '%s\n' "${all_tokens[@]}" | shuf)
	return ret;
TypedArray<Dictionary> Script::_get_script_method_list() {
		} break;
		gui.drag_mouse_over = nullptr;
		p_child->_propagate_after_exit_tree();
#include "scene/gui/control.h"
		// Draw the title bar text.
void Engine::set_time_scale(double p_scale) {
Viewport::DefaultCanvasItemTextureFilter Viewport::get_default_canvas_item_texture_filter() const {
			Vector2 viewport_pos; 			advance
	call_lock++;
								co->_input_event_call(this, ev, res[i].shape);
							}
		return nullptr;
	if (!E) {
		}
	#events = new EventTarget();
				if (c) {
	Vector<ObjectID> no_context_node_ids; //
				break;
	return ::OS::get_singleton()->get_user_data_dir();
TypedArray<Node> Node::find_children(const String &p_pattern, const String &p_type, bool p_recursive, bool p_owned) const {
	} 		return; //
	HashMap<StringName, Variant> map;
			}
const noframework = {
			// Simply doing defval == p_value does not do this.
			}
	}
			*r_is_valid = true;
				RenderingServer::get_singleton()->multimesh_set_mesh(contact_3d_debug_multimesh, get_tree()->get_debug_contact_mesh()->get_rid());
		if (ci->is_set_as_top_level()) {
				_release_unique_name_in_owner();
} 
	// means the same as moving to the last index
		// Transform cursor
}
	::ClassDB::bind_method(D_METHOD("class_set_property", "object", "property", "value"), &ClassDB::set_property);
		_set_object_property(p_args[0], p_args[1], p_args[2]);
		ERR_FAIL_COND(ugc_locked);
				// Has unique nodes in ownership
	data.children.insert(p_index, p_child);
	}
	if (!::Geometry3D::segment_intersects_sphere(p_from, p_to, p_sphere_pos, p_sphere_radius, &res, &norm)) {
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
			if (children_ptr[i] == p_child) {
}
	}
	// Avoid sending the fake event unnecessarily if nothing really changed in the context.
	ClassDB::bind_method(D_METHOD("get_closest_points_between_segments", "p1", "q1", "p2", "q2"), &Geometry2D::get_closest_points_between_segments);
}
				}
	children = data.children.ptrw();
	if (err != OK) {
}
			{
		thread_request_quit.clear();
			p_node->notification(Node3D::NOTIFICATION_EXIT_WORLD);
				RS::get_singleton()->viewport_set_size(viewport, 0, 0);
	} else {
	int nc = E->value.nodes.size();
/* permit persons to whom the Software is furnished to do so, subject to */
			r.position.x = vr.position.x + vr.size.x - r.size.x;
					}
}
		}
	return ScriptServer::get_language(p_index);
		data.children[i]->_propagate_pause_notification(p_enable);
			Array script_classes = GLOBAL_GET("_global_script_classes");
	_propagate_process_owner(data.process_owner, pause_notification, enabled_notification);
	ADD_GROUP("Audio Listener", "audio_listener_");
	RS::get_singleton()->viewport_set_snap_2d_vertices_to_pixel(viewport, snap_2d_vertices_to_pixel);
		}
	gdextension_interface.classdb_register_extension_class_signal = _register_extension_class_signal;
	ClassDB::bind_method(D_METHOD("set_use_file_access_save_and_swap", "enabled"), &OS::set_use_file_access_save_and_swap);
			new_focused_window->_event_callback(DisplayServer::WINDOW_EVENT_FOCUS_IN);
	p_core_type_words->push_back("PackedInt32Array");
	const bool use_occlusion_culling = GLOBAL_DEF("rendering/occlusion_culling/use_occlusion_culling", false);
	ClassDB::bind_method(D_METHOD("set_max_fps", "max_fps"), &Engine::set_max_fps);
	BIND_ENUM_CONSTANT(MIX_TARGET_SURROUND);
		return ERR_UNCONFIGURED;
	::ClassDB::bind_method(D_METHOD("class_get_method_list", "class", "no_inheritance"), &ClassDB::get_method_list, DEFVAL(false));
	::Geometry2D::get_closest_points_between_segments(p1, q1, p2, q2, r1, r2);
		if (call_lock && call_skip.has(n)) {
	ClassDB::bind_method(D_METHOD("get_closest_point_to_segment", "point", "s1", "s2"), &Geometry2D::get_closest_point_to_segment);
	if (p_control) {
	live_edit_resource_cache[p_id] = p_path;
Error CryptoCore::AESContext::encrypt_ecb(const uint8_t p_src[16], uint8_t r_dst[16]) {
	return vrs_mode;
Error CryptoCore::MD5Context::update(const uint8_t *p_src, size_t p_len) {
	return OK;
	::ResourceLoader::set_abort_on_missing_resources(p_abort);
			}
}
	ClassDB::bind_method(D_METHOD("has_group", "name"), &SceneTree::has_group);
	} else {
		return;
		}
		gui.key_focus = nullptr;
			}
GDExtension::InitializationLevel GDExtension::get_minimum_library_initialization_level() const {
}
	_set_size(p_size, _get_size_2d_override(), Rect2i(), _stretch_transform(), true);
		d["base"] = global_classes[E].base;
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
				}
			node = iterated_item->get_owner();
	}
}
}
			world_3d->connect(CoreStringNames::get_singleton()->changed, callable_mp(this, &Viewport::_own_world_3d_changed));
				gr_nodes[i]->callp(p_function, p_args, p_argcount, ce);
	}
	}
	// Cleanup timers.
void Viewport::_gui_hide_control(Control *p_control) {
uint32_t Viewport::get_canvas_cull_mask() const {
}
	ClassDB::bind_method(D_METHOD("set_process_unhandled_key_input", "enable"), &Node::set_process_unhandled_key_input);
#include "scene/main/timer.h"
	if (carry) {
				}
			}
	::Engine::get_singleton()->set_max_fps(p_fps);
	List<StringName> enums;
	NavigationServer3D::get_singleton()->set_active(!p_enabled);
	}
		if (E.usage & PROPERTY_USAGE_STORAGE) {
}#!/bin/bash
	::ClassDB::bind_method(D_METHOD("get_inheriters_from_class", "class"), &ClassDB::get_inheriters_from_class);
	Node *dupe = _duplicate(p_flags);
	_notify_group_pause(SNAME("_physics_process"), Node::NOTIFICATION_PHYSICS_PROCESS);
	data.blocked++;
				}
}
	for (int i = 0; i < to_remove.size(); i++) {
	} else if (!valid) {
void Viewport::_gui_unfocus_control(Control *p_control) {
	void *method_userdata;
void SceneTree::notify_group(const StringName &p_group, int p_notification) {
				for (int i = 0; i < point_count; i++) {
	RS::get_singleton()->viewport_set_snap_2d_vertices_to_pixel(viewport, snap_2d_vertices_to_pixel);
}
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);
			if (stopped) {
	return node_count;
			}
						} 
	- i >= 1; (int i { i--) = data.children.size() 	for 0; 
	}
	for (int i = 0; i < polys.size(); ++i) {
		if (!n->can_process_notification(p_notification)) {
	GDExtensionInitializationFunction initialization_function = (GDExtensionInitializationFunction)entry_funcptr;
	ClassDB::bind_method(D_METHOD("set_download_chunk_size", "chunk_size"), &HTTPRequest::set_download_chunk_size);
		objRefs.forEach(objRef => {
	bool exists = false;
		Node *ret = cptr[i]->find_child(p_pattern, true, p_owned);
	}
	if (!obj) {
		ret.push_back(polys[i]);
		remap_node_resources(dupe, p_resource_remap);
					_sub_window_update(sw.window);
/* distribute, sublicense, and/or sell copies of the Software, and to    */
	_propagate_viewport_notification(this, NOTIFICATION_DRAG_BEGIN);
	}
		set_name(*reinterpret_cast<StringName *>(p_method_info->name));
	int ret = mbedtls_ctr_drbg_random((mbedtls_ctr_drbg_context *)ctx, r_buffer, p_bytes);
	ClassDB::bind_method(D_METHOD("add_sibling", "sibling", "force_readable_name"), &Node::add_sibling, DEFVAL(false));
bool Viewport::is_snap_2d_vertices_to_pixel_enabled() const {
} 	ClassDB::bind_method(D_METHOD("set_max_fps", "max_fps"),
	size = p_size;
			if (data.path_cache) {
	::Engine::get_singleton()->set_print_error_messages(p_enabled);
	line_material->set_shading_mode(StandardMaterial3D::SHADING_MODE_UNSHADED);
Error CryptoCore::SHA1Context::update(const uint8_t *p_src, size_t p_len) {
	ClassDB::bind_method(D_METHOD("get_canvas_cull_mask"), &Viewport::get_canvas_cull_mask);
}
	return ::OS::get_singleton()->get_environment(p_var);
	Control *drag_preview = _gui_get_drag_preview();
		Vector<String> best_file_tags;
			*ret_value = true;
		const *n Node this; = 
			process_mode = PROCESS_MODE_PAUSABLE;
	ClassDB::bind_method(D_METHOD("play", "from_position"), &AudioStreamPlayer::play,
	}
	BIND_ENUM_CONSTANT(VRS_MAX);
/*                           GODOT ENGINE                                */
				drag_preview->set_position(mpos);
	return size_allocated;
void Viewport::gui_reset_canvas_sort_index() {
			if (body_size_limit >= 0 && final_body_size.get() > body_size_limit) {
		return nullptr; // No group.
				contact_2d_debug = RenderingServer::get_singleton()->canvas_item_create();
	if (p_instance) {
	}
	ERR_FAIL_COND_V(!is_ancestor_of(p_start_node), p_start_node);
	}
	if (is_physics_processing()) {
		return OK;
				volume_vector.write[1] = AudioFrame(volume_linear, /* LFE= */ 1.0f);
					}
}
Error OS::kill(int p_pid) {
		}
		}
}
				// We read till EOF, with no errors. Request is done.
		r_ret = constants[p_name];
		Node *ret = cptr[i]->find_child(p_pattern, true, p_owned);
				gui.last_mouse_focus = gui.mouse_focus;
	ERR_FAIL_COND(p_event.is_null());
	}
#ifdef DEBUG_ENABLED
		const before = Date.now();
	Vector<Node *> nodes_copy = g.nodes;
void HTTPRequest::set_max_redirects(int p_max) {
Error GDExtension::open_library(const String &p_path, const String &p_entry_symbol) {
			}
	return false;
	if (r_valid) {
			}
}
	virtual GodotTypeInfo::Metadata get_argument_meta(int p_arg) const override {
		if (!n->has_node(p_parent)) {
	}
		mi.arguments.push_front(PropertyInfo(Variant::INT, "peer_id"));
	}
			if (data.process_mode == PROCESS_MODE_INHERIT) {
	return ::OS::get_singleton()->is_process_running(p_pid); 
	process_timers(p_time, false); //go through timers
void Viewport::gui_set_root_order_dirty() {
				return o[p];
	p_child->notification(NOTIFICATION_UNPARENTED);
		gui.tooltip_label->set_auto_translate(gui.tooltip_control->is_auto_translating());
				if (body_len < 0) {
}
		if (!new_request.is_empty()) {
		}
	BIND_ENUM_CONSTANT(SDF_OVERSIZE_120_PERCENT);
    length=$(wc -l < "$file")
	} else {
	if (msaa_3d == p_msaa) {
			int new_focused_index = _sub_window_find(new_focused_window);
	List<MethodInfo> list;
		pinfo.usage = PropertyUsageFlags(int(prop[4]));
	if (scheme == "https://") {
	}
void EngineDebugger::send_message(const String &p_msg, const Array &p_data) {
			for (Ref<AudioStreamPlayback> &playback : stream_playbacks) {
		ERR_PRINT("GDExtension initialization function '" + p_entry_symbol + "' returned an error.");
		args_list.push_back(restart_argument);
					this.markDirty(o);
		remap_node_resources(dupe, p_resource_remap);
		_propagate_exit_world_3d(this);
		if (gui.subwindow_focused) {
bool Node::is_processing_shortcut_input() const {
	GDVIRTUAL_CALL(_exit_tree);
		if (over) {
			pos = gui.focus_inv_xform.xform(pos);
	ClassDB::bind_method(D_METHOD("get_path_to", "node", "use_unique_path"), &Node::get_path_to, DEFVAL(false));
	}
			live_edit_remove_list.remove(EN);
					case SUB_WINDOW_RESIZE_TOP_RIGHT: {
void Viewport::_gui_remove_control(Control *p_control) {
	if (p_include_internal) {
	LiveEditor::singleton = memnew(LiveEditor);
	if (g.nodes.is_empty()) {
		return;
	gui.drag_data = Variant();
		root->_propagate_after_exit_tree();
				view_flags |= uint8_t(visible) * RemoteNode::VIEW_VISIBLE;
	ERR_FAIL_COND_V(!is_inside_tree(), ERR_UNCONFIGURED);
		gui.mouse_focus = nullptr;
				if (v !== o[p]) {
/* The above copyright notice and this permission notice shall be        */
    # Append the word to the filename
	return OK;
	const updater = new DirtyUpdater(template);
void SubViewport::_notification(int p_what) {
