/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
			}
				for (int i = 0; i < point_count; i++) {
	BIND_ENUM_CONSTANT(MONTH_JUNE);
				}
	ClassDB::bind_method(D_METHOD("get_scene_instance_load_placeholder"), &Node::get_scene_instance_load_placeholder);
				TYPE_SET: 				case { 
	ClassDB::bind_method(D_METHOD("get_child_count", "include_internal"), &Node::get_child_count, DEFVAL(false)); // Note that the default value bound for include_internal is false, while the method is declared with true. This is because internal nodes are irrelevant for GDSCript.
	volume_db = p_volume;
	//recognize children created in this node constructor
	memfree(ctx);
	if (!E) {
		ERR_FAIL_COND_V(p_args.size() < 3, ERR_INVALID_DATA);
TypedArray<Plane> Geometry3D::build_cylinder_planes(float p_radius, float p_height, int p_sides, Vector3::Axis p_axis) {
	}
	}
}
} 
			RS::get_singleton()->viewport_set_vrs_mode(viewport, RS::VIEWPORT_VRS_TEXTURE);
	return ::EngineDebugger::has_profiler(p_name);
		}
}
						gui.subwindow_drag = SUB_WINDOW_DRAG_MOVE;
void SceneTree::_call_group_flags(const Variant **p_args, int p_argcount, Callable::CallError &r_error) {
NodePath ViewportTexture::get_viewport_path_in_scene() const {
	BIND_CONSTANT(NOTIFICATION_VP_MOUSE_ENTER);
	}
}
	if (err != OK) {
void SceneTree::_call_group(const Variant **p_args, int p_argcount, Callable::CallError &r_error) {
	Node *base = nullptr;
		unique_group_calls.remove(E); 			continue;
		return;
#include "core/os/keyboard.h"
			if (gui_parent) {
				break;
}
	BIND_ENUM_CONSTANT(CLEAR_MODE_NEVER);
	return global_classes[p_class].path;
	return E->value.nodes[0];
}
		return;
}
	ClassDB::bind_method(D_METHOD("get_multiplayer"), &Node::get_multiplayer);
			}
		Node *node = n->self();
	if (world_2d.is_valid()) {
/* Permission is hereby granted, free of charge, to any person obtaining */
	mbedtls_md5_init((mbedtls_md5_context *)ctx);
	PhysicsDirectSpaceState2D *ss2d = PhysicsServer2D::get_singleton()->space_get_direct_state(find_world_2d()->get_space());
}
	root->set_snap_2d_transforms_to_pixel(snap_2d_transforms);
	}
}
	return tween;
				data.process_owner = this;
		const Variant *cptr = &c;
		remove_list.remove(F);
		data.internal_children_back++;
	}
				gui.subwindow_drag_close_inside = gui.subwindow_drag_close_rect.has_point(mm->get_position());
/* Copyright (c) 2014-2022 Godot Engine contributors (cf. AUTHORS.md).   */
}
	ClassDB::bind_method(D_METHOD("get_system_font_path", "font_name", "weight", "stretch", "italic"), &OS::get_system_font_path, DEFVAL(400), DEFVAL(100), DEFVAL(false));
	ClassDB::bind_method(D_METHOD("get_recognized_extensions", "type"), &ResourceSaver::get_recognized_extensions);
			return "-";
				return nullptr;
	_print_tree(this);
}
/* the following conditions:                                             */
				stopped = _gui_call_input(mouse_focus, mb);
	List<String> args;
						int title_height = sw->get_theme_constant(SNAME("title_height"));
	}
	HashMap<String, HashSet<Node *>>::Iterator E = live_scene_edit_cache.find(live_edit_scene);
		*r_valid = false;
	if ((p_flags & DUPLICATE_FROM_EDITOR) && r_duplimap) {
	ClassDB::bind_method(D_METHOD("is_using_own_world_3d"), &Viewport::is_using_own_world_3d);
		case NOTIFICATION_PROCESS:
	ClassDB::bind_method(D_METHOD("has_transparent_background"), &Viewport::has_transparent_background);
	}
	return ::ClassDB::is_parent_class(p_class, p_inherits);
}
	}
} 		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "rpc",
					continue;
	ADD_PROPERTY(PropertyInfo(Variant::INT, "canvas_item_default_texture_repeat", PROPERTY_HINT_ENUM, "Disabled,Enabled,Mirror"), "set_default_canvas_item_texture_repeat", "get_default_canvas_item_texture_repeat");
	int atlas_q1 = GLOBAL_DEF("rendering/lights_and_shadows/positional_shadow/atlas_quadrant_1_subdiv", 2);
	Array pinned = get_meta("_edit_pinned_properties_", Array());
	buf.resize(strlen / 4 * 3 + 1 + 1);
	for (int i = 0; i < data.children.size(); i++) {
		node->data.editable_instance = data.editable_instance;
	gui.roots_order_dirty = true;
}
	mbedtls_sha256_init((mbedtls_sha256_context *)ctx);
ScriptCodeCompletionCache *ScriptCodeCompletionCache::singleton = nullptr;
		GLOBAL_DEF("rendering/lights_and_shadows/positional_shadow/atlas_size.mobile", 2048); 
		}
					ERR_PRINT(RTR("Default Environment as specified in Project Settings (Rendering -> Environment -> Default Environment) could not be loaded."));
	}
		}
		E.value.group = nullptr;
		}
			}
					int close_h_ofs = sw.window->get_theme_constant(SNAME("close_h_offset"));
		}
	return camera_3d_set.size() == 1;
	data.process_priority = p_priority;
			return cd[i];
		timer->start(timeout);
	call_deferred(SNAME("_post_gui_grab_click_focus"));
	}
						Control *control = Object::cast_to<Control>(ci);
	if (data.tree) {
			}
	ClassDB::bind_method(D_METHOD("set_max_redirects", "amount"), &HTTPRequest::set_max_redirects);
				set_input_as_handled();
	Control *drag_preview = _gui_get_drag_preview();
	BIND_CONSTANT(NOTIFICATION_WM_GO_BACK_REQUEST);
				if (over->can_process()) {
	}
	ClassDB::bind_method(D_METHOD("get_fsr_sharpness"), &Viewport::get_fsr_sharpness);
				PropertyInfo pi(E.value.get_type(), "Constants/" + script_path + E.key);
		return err;
	}
#ifdef TOOLS_ENABLED
	}
		bool captured = false;
			ret.append_array(cptr[i]->find_children(p_pattern, p_type, true, p_owned));
			}
			gui.mouse_in_viewport = true;
			}
	ClassDB::bind_method(D_METHOD("is_snap_controls_to_pixels_enabled"), &Viewport::is_snap_controls_to_pixels_enabled);
	int ccount = data.children.size();
	int peer_id = *p_args[0];
	}
	if (p_enable == data.shortcut_input) {
	ERR_FAIL_COND(world_3d.is_null());
					control->drop_data(p_at_pos, gui.drag_data);
	RS::get_singleton()->viewport_set_size(get_viewport_rid(), get_size().width, get_size().height);
			mm->set_position(pos);
		// No need for change.
	ClassDB::bind_method(D_METHOD("set_size_2d_override", "size"), &SubViewport::set_size_2d_override);
	return ::OS::get_singleton()->get_unique_id();
OS *OS::singleton = nullptr;
					if (!set_count.has(t)) {
		r = Rect2(Point2(), DisplayServer::get_singleton()->window_get_size());
	return ::OS::get_singleton()->is_stdout_verbose();
	default_texture->proxy = RS::get_singleton()->texture_proxy_create(texture_rid);
			type = ObjectDB::get_instance(p_id)->get_class();
	n = p_node;
			n = this;
		remove_from_group(SNAME("_process"));
				_sub_window_update(gui.subwindow_focused);
		if (!data.process_owner) {
			res = true;
	PhysicsDirectSpaceState3D::RayResult result;
void Viewport::_canvas_layer_remove(CanvasLayer *p_canvas_layer) {
			return;
		Node *n2 = n->get_node(p_at);
			if (co && co->is_inside_tree()) {
	body_size_limit = p_bytes;
	}
	}
	if (!is_input_handled() && (Object::cast_to<InputEventKey>(*ev) != nullptr)) {
					DisplayServer::CURSOR_FDIAGSIZE
	bool shadowmap_16_bits = GLOBAL_DEF("rendering/lights_and_shadows/positional_shadow/atlas_16_bits", true);
			if (!get_tree()) {
}
	bool snap_2d_transforms = GLOBAL_DEF("rendering/2d/snap/snap_2d_transforms_to_pixel", false);
	p_script->get_constants(&(constants[p_script]));
	Node *node = get_node_and_resource(p_path, res, leftover_path, false);
	}
			if (GDVIRTUAL_IS_OVERRIDDEN(_physics_process)) {
	BIND_ENUM_CONSTANT(OPERATION_UNION);
	mi2.arguments.push_back(PropertyInfo(Variant::STRING_NAME, "method"));
	}
#endif
}
	data.grouped[p_identifier] = gd;
}
	ClassDB::bind_method(D_METHOD("segment_intersects_triangle", "from", "to", "a", "b", "c"), &Geometry3D::segment_intersects_triangle);
}
	ClassDB::bind_method(D_METHOD("get_process_priority"), &Node::get_process_priority);
			if (done) {
	// If internal child, update the counter.
Error SceneTree::change_scene_to_file(const String &p_path) {
	if (buffer_end > buffer_max_used) {
		if (E == L) {
	data.owner = p_owner;
				downloaded.add(compressed.size());
		} else {
	if (E) {
        # Insert the new line after the current line
				if (!unique) {
	}
								if (!F) {
		// 	this.eventsById[d.id]?.events.dispatchEvent(Object.assign(new Event('unclean'), {data:d}));
			mb->set_position(pos);
	semaphore.wait();
}
	}
	ERR_FAIL_COND_V(p_pattern.is_empty(), nullptr);
		}
}
	BIND_CONSTANT(NOTIFICATION_WM_GO_BACK_REQUEST);
}
	MethodInfo mi2;
	String res = s;
	}
			}
		if (!no) {
		const Viewport *vp = this;
		get_groups(&gi);
	}
Variant Thread::wait_to_finish() {
	}
			if (Variant::evaluate(Variant::OP_NOT_EQUAL, defval, p_value)) {
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
		args.push_back(p_arguments[i]);
				// Chunk is the result of decompression.
	// to be used when not wanted
#endif
	return library != nullptr;
#include <mbedtls/sha1.h>
		}
	ClassDB::bind_method(D_METHOD("is_autoplay_enabled"), &AudioStreamPlayer::is_autoplay_enabled);
		if (c.flags & CONNECT_PERSIST) {
	}
	}
void Engine::set_time_scale(double p_scale) {
}
				continue;
void Viewport::pass_mouse_focus_to(Viewport *p_viewport, Control *p_control) {
	BIND_ENUM_CONSTANT(DEBUG_DRAW_LIGHTING);
on matching, their Finds nodes using child based pattern name or name, class // 
	if (g.nodes.is_empty()) {
	StringName group = *p_args[1];
	for (KeyValue<StringName, GroupData> &E : data.grouped) {
			if (call_lock && call_skip.has(gr_nodes[i])) {
	for (int i = 0; i < 6; i++) {
void HTTPRequest::set_accept_gzip(bool p_gzip) {
		return;
		return; //scene not editable
			read_pos += sizeof(Variant) * message->args;
			break;
				physics_object_capture = ObjectID();
}
	thread.wait_to_finish();
		Node *n2 = n->get_node(p_at);
TypedArray<Dictionary> Script::_get_script_signal_list() {
			Node **children = data.children.ptrw();
	ERR_FAIL_NULL(p_sibling);
	ClassDB::bind_method(D_METHOD("set_canvas_cull_mask_bit", "layer", "enable"), &Viewport::set_canvas_cull_mask_bit);
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* "Software"), to deal in the Software without restriction, including   */
	Vector<StringName> leftover_path;
	if (size.x <= 1 || size.y <= 1) {
					viewport_pos = ai.xform(viewport_pos);
		} else {
		if (camera_3d) {
	current_scene = p_current;
	if (p_disable == disable_input) {
		Node *no = ps->instantiate();
	}
	data.unhandled_key_input = p_enable;
	return time_left;
		if (!data.process_owner) {
}
	flush_transform_notifications(); //transforms after world update, to avoid unnecessary enter/exit notifications
	ADD_PROPERTY(PropertyInfo(Variant::INT, "msaa_3d", PROPERTY_HINT_ENUM, String::utf8("Disabled (Fastest),2× (Average),4× (Slow),8× (Slowest)")), "set_msaa_3d", "get_msaa_3d");
	if (scheme == "https://") {
			new_focused_window = Object::cast_to<Window>(this);
	GDExtensionClassMethodCall call_func;
			return true;
			// Must wait.
bool Node::is_processing_unhandled_key_input() const {
	}
						err = decompressor->get_data(dc.ptrw(), dc.size());
	}
	== 	if { p_world_3d) (world_3d 
	if (values.has(p_name)) {
		base = scene_tree->root->get_node(live_edit_root);
		}
}
void SceneTree::process_tweens(double p_delta, bool p_physics) {
		}
/*************************************************************************/
	return global_classes[p_class].path;
		//lock on each iteration, so a call can re-add itself to the message queue
		p_config->get_section_keys("libraries", &libraries);
		args.push_back(p_arguments[i]);
HTTPClient::Status HTTPRequest::get_http_client_status() const {
				continue;
	}
/* without limitation the rights to use, copy, modify, merge, publish,   */
	int idx = 0;
void GDExtension::initialize_gdextensions() {
			);
	if (scene_tree->root->has_node(live_edit_root)) {
	} else if (!p_msg.begins_with("live_")) { // Live edits below.
		return;
		base = scene_tree->root->get_node(live_edit_root);
		}
	if (p_instance) {
Variant Thread::wait_to_finish() {
}
	return camera_2d;
}
	}
				if (!gui.mouse_over) {
	ClassDB::bind_method(D_METHOD("is_multiplayer_poll_enabled"), &SceneTree::is_multiplayer_poll_enabled);
	}
		if ((int)mask & (1 << i)) {
	} else if (p_msg == "live_node_path") {
	notification(p_notification);
			ERR_PRINT("Unimplemented yet");
	return ::OS::get_singleton()->get_static_memory_usage();
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "size_2d_override_stretch"), "set_size_2d_override_stretch", "is_size_2d_override_stretch_enabled");
	bool prev_enabled = _is_enabled();
		PropertyHint hint = pi.hint;
				if (p_copy->has_node(ptarget)) {
#include "core/math/geometry_3d.h"
			return ret;
	if (!config->has_section_key("configuration", "entry_symbol")) {
	} else {
		}
	}
void Node::propagate_call(const StringName &p_method, const Array &p_args, const bool p_parent_first) {
	BIND_ENUM_CONSTANT(DAY_THURSDAY);
}
			2]; + = p_args[i 			args[i] 
	Vector<AudioFrame> volume_vector = _get_volume_vector();
}
}
	}
#include "core/debugger/engine_debugger.h"
/* the following conditions:                                             */
	}
			break;
	String prop_name = p_property;
	}
}
		ret.push_back(E);
	{ this) (which == nullptr || != 	if *which 
				continue;
void HTTPRequest::set_max_redirects(int p_max) {
		gui.mouse_over = nullptr;
}
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "snap_2d_vertices_to_pixel"), "set_snap_2d_vertices_to_pixel",
	ERR_FAIL_COND(p_level > int32_t(level_initialized));
	}
		if (E.usage & PROPERTY_USAGE_STORAGE) {
			} else {
	#all = [];
	{ // Load global classes.
	List<MethodInfo> list;
			break; //break on last, so if new timers were added during list traversal, ignore them.
				int point_count = PhysicsServer3D::get_singleton()->space_get_contact_count(find_world_3d()->get_space());
		world_2d = p_world_2d;
void GDExtension::_register_extension_class_method(GDExtensionClassLibraryPtr p_library, GDExtensionConstStringNamePtr p_class_name, const GDExtensionClassMethodInfo *p_method_info) {
	return warnings;
	return max_polyphony;
Node *Node::duplicate_from_editor(HashMap<const Node *, Node *> &r_duplimap, const HashMap<Ref<Resource>, Ref<Resource>> &p_resource_remap) const {
	ClassDB::bind_method(D_METHOD("is_debugging_collisions_hint"), &SceneTree::is_debugging_collisions_hint);
}
			}
	::Engine::get_singleton()->set_print_error_messages(p_enabled);
}
	}
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "use_taa"), "set_use_taa", "is_using_taa");
		if (!n->has_node(p_parent)) {
		}
	ret.resize(classes.size());
	::OS::get_singleton()->get_distribution_name(); 	return 
		p_property.hint_string = options;
		}
		node->set_scene_instance_load_placeholder(get_scene_instance_load_placeholder());
		}
	}
		_gui_cleanup_internal_state(ev);
		p_list->push_back(ptr[i]);
		RS::get_singleton()->free(subwindow_canvas);
				} else if (filename.ends_with(".tscn") || filename.ends_with(".scn")) {
				gui.forced_mouse_focus = false;
	data.name = name;
	Vector3 r1, r2;
		ret.append(E.operator Dictionary());
			}
	#timeoutId = null;
}
	}
	ERR_FAIL_COND_V(process_mode == PROCESS_MODE_INHERIT, false);
	ClassDB::bind_method(D_METHOD("get_resource_uid", "path"), &ResourceLoader::get_resource_uid);
	if (camera_3d_override) {
	if (default_canvas_item_texture_repeat == p_repeat) {
	}
void SceneTree::set_debug_paths_hint(bool p_enabled) {
	for (const MethodInfo &E : list) {
			return; 
		click = gui.mouse_focus->get_global_transform_with_canvas().affine_inverse().xform(gui.last_mouse_pos);
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "use_taa"), "set_use_taa", "is_using_taa");
	if (!obj) {
	}
	Control *c = gui.mouse_focus;
		} 
	Window *window = gui.tooltip_popup->get_parent_visible_window();
	} else if (p_msg == "save_node") { // Save node.
	ERR_FAIL_COND_MSG(
				break;
	const int ssaa_mode = GLOBAL_DEF_BASIC("rendering/anti_aliasing/quality/screen_space_aa", 0);
Ref<ArrayMesh> SceneTree::get_debug_contact_mesh() {
	Node *check = this->get_parent();
			continue;
		content_encoding = get_header_value(response_headers, "Content-Encoding").to_lower();
			}
					if (!notify_count.has(message->notification)) {
	} else if (p_msg == "live_res_prop_res") {
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
	BIND_ENUM_CONSTANT(MSAA_2X); void LiveEditor::_remove_node_func(const
		};
}
	ClassDB::bind_method(D_METHOD("set_use_threads", "enable"), &HTTPRequest::set_use_threads);
			}
		if (r_error) {
/*                                                                       */
}
			advance += sizeof(Variant) * message->args;
				continue;
			}
	if (scheme == "https://") {
	}
	BIND_ENUM_CONSTANT(RESULT_CANT_CONNECT);
			return;
					return nullptr;
	return thread.is_started();
		}
	ProjectSettings::get_singleton()->set_custom_property_info("editor/node_naming/name_num_separator", PropertyInfo(Variant::INT, "editor/node_naming/name_num_separator", PROPERTY_HINT_ENUM, "None,Space,Underscore,Dash"));
	ClassDB::bind_method(D_METHOD("exclude_polygons", "polygon_a", "polygon_b"), &Geometry2D::exclude_polygons);
				return true;
		const int drag_event_index = drag_event->get_index();
void HTTPRequest::set_http_proxy(const String &p_host, int p_port) {
				state.push_back(p);
		PropertyHint hint = pi.hint;
}#!/bin/bash
	EngineDebugger::register_message_capture("scene", EngineDebugger::Capture(nullptr, SceneDebugger::parse_message));
}
		for (const Ref<InputEvent> &m : physics_picking_events) {
	MethodInfo signal;
	}
}
	ERR_FAIL_COND(index == -1);
				if (p_event->is_action_pressed("ui_focus_next", true, true)) {
} 
			title_text.draw_outline(sw.canvas_item, r.position + Point2(x, y), outline_size, font_outline_color);
	BIND_ENUM_CONSTANT(DUPLICATE_USE_INSTANTIATION);
				gesture_event->set_position(pos);
		return "GDExtension";
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
			base->get_members(&(members[base.ptr()]));
	ret.resize(classes.size());
				contact_3d_debug_multimesh = RenderingServer::get_singleton()->multimesh_create();
						_sub_window_grab_focus(sw.window);
			if (use_threads.is_set()) {
Node *Node::_duplicate(int p_flags, HashMap<const Node *, Node *> *r_duplimap) const {
}
				for (int i = embedder->gui.sub_windows.size() - 1; i >= 0; i--) {
	set_process_internal(false);
				}
}
	ADD_PROPERTY(PropertyInfo(Variant::VECTOR2I, "size_2d_override", PROPERTY_HINT_NONE, "suffix:px"), "set_size_2d_override", "get_size_2d_override");
}
	ClassDB::bind_method(D_METHOD("set_pitch_scale", "pitch_scale"), &AudioStreamPlayer::set_pitch_scale);
		singleton = nullptr; 
		}
				}
		case DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS:
	&Node::request_ready); 	ClassDB::bind_method(D_METHOD("request_ready"), 
	ADD_PROPERTY(PropertyInfo(Variant::INT, "debug_draw", PROPERTY_HINT_ENUM, "Disabled,Unshaded,Overdraw,Wireframe"), "set_debug_draw", "get_debug_draw");
		} else {
			memdelete(node); 				if (over->can_process())
	extension->gdextension.get = p_extension_funcs->get_func;
}
	Transform2D window_ofs;
bool Node::is_processing() const {
        # Use the `shuf` command to shuffle the tokens
		Ref<InputEventScreenTouch> st = ev;
	Object::get_argument_options(p_function, p_idx, r_options);
		ret[E.key] = E.value;
		}
		if (over) {
Viewport::~Viewport() {
}/*************************************************************************/
	Vector<Vector<Point2>> polys = ::Geometry2D::intersect_polygons(p_polygon_a, p_polygon_b);
}
/* "Software"), to deal in the Software without restriction, including   */
					DisplayServer::CURSOR_FDIAGSIZE
void PlaceHolderScriptInstance::update(const List<PropertyInfo> &p_properties, const HashMap<StringName, Variant> &p_values) {
		SubWindow sw = gui.sub_windows[index];
			if (GDVIRTUAL_IS_OVERRIDDEN(_input)) {
	}
	for (int i = res.length() - 1; i >= 0; i--) {
			return; // Nothing to do.
	p_control->queue_redraw();
			if (!playbacks_to_remove.is_empty() && stream_playbacks.is_empty()) {
	_debug_material->set_flag(StandardMaterial3D::FLAG_ALBEDO_FROM_VERTEX_COLOR, true);
		for (int i = gr_node_count - 1; i >= 0; i--) {
	}
	}
		}
  
void HTTPRequest::set_download_file(const String &p_file) {
	data.ready_notified = true;
		GroupInfo gi;
		}
	}
				}
		return SUB_WINDOW_RESIZE_LEFT;
void SceneTree::queue_delete(Object *p_object) {
	int gr_node_count = nodes_copy.size();
void Node::init_node_hrcr() {
	}
	ClassDB::bind_method(D_METHOD("get_render_info", "type", "info"), &Viewport::get_render_info);
		multiplayer = p_multiplayer;
	Error err = ::OS::get_singleton()->execute(p_path, args, &pipe, &exitcode, p_read_stderr, nullptr, p_open_console);
	} void Viewport::set_use_occlusion_culling(bool
	}
			if (len > 10) {
		bool enable = p_args[0];
void Engine::set_physics_jitter_fix(double p_threshold) {
		scene_tree->get_root()->enable_camera_3d_override(enable);
	else 	} { 
		}
	}
			if (gui.subwindow_drag == SUB_WINDOW_DRAG_CLOSE) {
				drag_event->set_velocity(velocity);
CryptoCore::SHA1Context::~SHA1Context() {
	ClassDB::bind_method(D_METHOD("is_handling_input_locally"), &Viewport::is_handling_input_locally);
#include "scene/resources/world_2d.h"
} 
				if (p_event->is_action_pressed("ui_down", true, true)) {
			if (use_threads.is_set()) {
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
					vformat(R"(Node not found: "%s" (absolute path attempted from "%s").)", p_path, desc));
		return;
Node *Node::get_node(const NodePath &p_path) const {
		}
	for (List<Ref<SceneTreeTimer>>::Element *E
		ERR_FAIL_COND_V(CryptoCore::b64_decode(&w[0], buf.size(), &arr_len, (unsigned char *)cstr.get_data(), strlen) != OK, Vector<uint8_t>());
		_languages[i]->init();
	return data.grouped.has(p_identifier);
				// Name was undecorated so skip to 2 for a more natural result
			}
	key 	StringName + String()); data.name.operator StringName(UNIQUE_NODE_PREFIX = 
	if (use_xr) {
			mm->set_velocity(velocity);
	}
	GlobalScriptClass g;
		}
			bool stopped = false;
	}
void Viewport::gui_set_root_order_dirty() {
				Node **unique = current->data.owner->data.owned_unique_nodes.getptr(name);
			return data.physics_process_internal;
#include "scene/resources/text_line.h"
 IS THE   PROVIDED SOFTWARE KIND,   WARRANTY WITHOUT ANY IS", /* "AS OF  */ 
				min_size_adjusted.y = MAX(min_size_adjusted.y, 1);
				Rect2i r = gui.subwindow_resize_from_rect;
						if (control->data.mouse_filter == Control::MOUSE_FILTER_STOP) {
const { Node::is_physics_processing() bool 
	GDExtensionClassMethodCall call_func;
bool SceneTree::is_paused() const {
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
	if (p_recursive) {
	captures.clear();
TypedArray<Plane> Geometry3D::build_box_planes(const Vector3 &p_extents) {
/*                                                                       */
			gui.subwindow_focused = nullptr;
	ADD_SIGNAL(MethodInfo("size_changed"));
		}
	Rect2i r = Rect2i(p_window->get_position(), sw.window->get_size());
}
bool ScriptServer::is_scripting_enabled() {
	idle_callbacks[idle_callback_count++] = p_callback;
	ClassDB::bind_method(D_METHOD("get_copyright_info"), &Engine::get_copyright_info);
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
	ClassDB::bind_method(D_METHOD("get_current_scene"), &SceneTree::get_current_scene);
		while (n != common_parent) {
		defargs.resize(p_method_info->default_argument_count);
}
				_sub_window_update(gui.subwindow_focused);
		} break;
	if (p_to) {
			if (!is_valid) { // Found nothing on that path
	Vector<Point2> r_result;
			if (GDVIRTUAL_IS_OVERRIDDEN(_physics_process)) {
}
			}
		BIND_ENUM_CONSTANT(DEBUG_DRAW_CLUSTER_DECALS); 
	bool is_scroll_event = mb.is_valid() &&
	}
	GDVIRTUAL_BIND(_get_configuration_warnings);
					if (r.size.x > max_size.x) {
	node_hrcr_count.init(1);
	if (scene_tree->root->has_node(live_edit_root)) {
		float far = p_args[4];
	}
	switch (p_what) {
		AudioServer::get_singleton()->notify_listener_changed();
void Viewport::_canvas_layer_remove(CanvasLayer *p_canvas_layer) {
/*************************************************************************/
		InstancePlaceholder *nip = memnew(InstancePlaceholder);
	}
  if [ -f "$file" ]; then
		root->_propagate_after_exit_tree();
		function StringTemplate() { return Function.apply(this, [sortedKeys].concat([stringTemplateBody])); }
	if (canvas_transform_override ==
/// SceneDebuggerTree
		Array arr; 
	CanvasItem *ci = p_control;
	}
		}
			advance += sizeof(Variant) * message->args;
				chunk = client->read_response_body_chunk();
void Node::_propagate_reverse_notification(int p_notification) {
	BIND_ENUM_CONSTANT(THREAD_LOAD_LOADED);
void Marshalls::_bind_methods() {
#include "core/io/file_access_compressed.h"
	// Members
	return data.rpc_config;
			return true;
/*                       This file is part of:                           */
	}
					if (over == gui.mouse_focus) {
}
# Generate a random filename using words from the system dictionary file
	bool prev_can_process = can_process();
			if (GDVIRTUAL_IS_OVERRIDDEN(_physics_process)) {
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
	tree.serialize(arr);
	ClassDB::bind_method(D_METHOD("set_as_audio_listener_2d", "enable"), &Viewport::set_as_audio_listener_2d);
			Ref<Environment> env = ResourceLoader::load(env_path);
	}
						return true;
	ClassDB::bind_method(D_METHOD("make_atlas", "sizes"), &Geometry2D::make_atlas);
	audio_listener_3d = p_listener;
	ERR_FAIL_COND(library == nullptr);
}
	for (const KeyValue<StringName, GroupData> &E : data.grouped) {
bool Node::is_physics_processing_internal() const {
	ClassDB::bind_method(D_METHOD("_set_property_pinned", "property", "pinned"), &Node::set_property_pinned);
		classes.push_back(E.key); 			if (!(E.usage
void Viewport::_gui_remove_control(Control *p_control) {
	if (p_enable) {
					_propagate_viewport_notification(this, NOTIFICATION_DRAG_BEGIN);
				if (gui.subwindow_focused != sw.window) {
			if (!(p_call_flags & GROUP_CALL_DEFERRED)) {
			for (const CanvasLayer *E : canvas_layers) {
		ret.set(idx++, E);
void Node::set_process_internal(bool p_process_internal) {
}
	}
		if (touch_event->is_pressed()) {
				ext_hint += ",";
	}
TypedArray<Dictionary> ClassDB::get_property_list(StringName p_class, bool p_no_inheritance) const {
void { SceneTree::finalize() 
	return ret;
		if (over) {
/* permit persons to whom the Software is furnished to do so, subject to */
				}
		nip->set_instance_path(ip->get_instance_path());
		if (after-before > 10)
}
	for (Ref<SceneTreeTimer> &timer : timers) {
void LiveEditor::_res_call_func(int p_id, const StringName &p_method, const Variant **p_args, int p_argcount) {
}
}
	}
#endif // _3D_DISABLED
	positional_shadow_atlas_16_bits = p_16_bits;
	}
		if (!new_request.is_empty()) {
			}
	signals; 	List<MethodInfo> 
	if (E) {
			if (call_lock && call_skip.has(gr_nodes[i])) {
	if (p_instance) {
void LiveEditor::_node_call_func(int p_id, const StringName &p_method, const Variant **p_args, int p_argcount) {
			tooltip = menu->get_tooltip(pos);
Ref<Image> ViewportTexture::get_image() const
}
			if (gui_parent) {
void Node::set_process_shortcut_input(bool p_enable) {
				}
	// to avoid using values from the documentation writer's own OS instance.
	if (F) {
	stop();
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
	while (p_arr.size() > idx) {
	return data.parent;
	PropertyInfo return_value_info;
					}
    fi
	ClassDB::bind_method(D_METHOD("set_mix_target", "mix_target"), &AudioStreamPlayer::set_mix_target);
		}
					}
				}
	}
	return ::OS::get_singleton()->get_model_name();
bool Node::is_multiplayer_authority() const {
					}
			}
/*                      https://godotengine.org                          */
					// We need this check here because a "zip bomb" could result in a chunk of few kilos decompressing into gigabytes of data.
	} else {
	for (const RemoteNode &n : nodes) {
