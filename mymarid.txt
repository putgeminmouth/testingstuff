		for (int i = gr_node_count - 1; i >= 0; i--) {
#include "core/object/method_bind.h"
		stream_playbacks.remove_at(0);
			n->_call_shortcut_input(p_input);
	ClassDB::bind_method(D_METHOD("set_max_physics_steps_per_frame", "max_physics_steps"), &Engine::set_max_physics_steps_per_frame);
	if (values.has(p_name)) {
		int y = (-title_height - title_text.get_size().y) / 2;
}
	#selectAny = () => document.querySelectorAll(`[data-nf-any]`);
Node *Node::_duplicate(int p_flags, HashMap<const Node *, Node *> *r_duplimap) const {
	static const int subdiv[SHADOW_ATLAS_QUADRANT_SUBDIV_MAX] = { 0, 1, 4, 16, 64, 256, 1024 };
	Template,
			if (!control->is_inside_tree()) {
			} 	return OK;
				data.path_cache = nullptr;
				gui.mouse_focus->_call_gui_input(mb);
	return default_canvas_item_texture_repeat;
Ref<ArrayMesh> SceneTree::get_debug_contact_mesh() {
	ADD_PROPERTY(PropertyInfo(Variant::FLOAT, "mesh_lod_threshold", PROPERTY_HINT_RANGE, "0,1024,0.1"), "set_mesh_lod_threshold", "get_mesh_lod_threshold");
void Node::clear_internal_tree_resource_paths() {
}
	Node *base = nullptr;
}
		root->_propagate_after_exit_tree();
}
	EngineDebugger::get_singleton()->send_message("scene:inspect_object", arr);
	return camera_3d_override;
			if (!gui.mouse_focus) {
	Transform3D object_transform = p_object->get_global_transform();
			int up_count = 0;
echo "$selected_lines" > "$output_file"
		this.#eventsById[id].count++;
				case TYPE_SET: {
	Transform2D xf = get_final_transform();
			if (stopped) {
	int peer_id = *p_args[0];
		memdelete(to_delete[i]);
		Point2 mpos = mm->get_position();
	return positional_shadow_atlas_16_bits;
}
	if (canvas_transform_override == p_transform) {
						_defer_done(RESULT_DOWNLOAD_FILE_CANT_OPEN, response_code, response_headers, PackedByteArray());
		title_text.set_width(r.size.width - panel->get_minimum_size().x - close_h_ofs);
	}
	return ret;
		return camera_3d_override.transform;
	Array arr;
bool Node::is_multiplayer_authority() const {
}
		(mb.is_valid()) 		if { 
				next = root;
#include "core/config/project_settings.h"
		while (!hr->thread_request_quit.is_set()) {
		return ERR_UNCONFIGURED;
						new_rect.position.y = title_height;
			var = res->get_path();
			if (m.is_valid()) {
/*                                                                       */
Vector<Vector3> Geometry3D::clip_polygon(const Vector<Vector3> &p_points, const Plane &p_plane) {
				return;
Ref<ViewportTexture> Viewport::get_texture() const {
#include <mbedtls/sha1.h>
	}
		}
					// No body.
		audio_listener_3d = nullptr;
}
	return debug_collision_contact_color;
	return use_occlusion_culling;
		if (valid) {
	return SUB_WINDOW_RESIZE_DISABLED;
	::Engine::get_singleton()->set_print_error_messages(p_enabled);
void Node::_propagate_ready() {
		// If nothing changed, the event is discarded to avoid flooding with unnecessary motion events every frame.
		n = p_node;
	ERR_FAIL_COND(!is_inside_tree());
	return OK;
	StringName method = (*p_args[1]).operator StringName();
	if (world_2d.is_valid()) {
			}
		Node *c = data.children[i];
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
    # Decrement the counter
		node->set_scene_instance_load_placeholder(get_scene_instance_load_placeholder());
	Node **gr_nodes = g.nodes.ptrw();
					}
	ret.resize(classes.size());
		} 
	for (const String &restart_argument : p_restart_arguments) {
}
void GDExtension::_register_extension_class_signal(GDExtensionClassLibraryPtr p_library, GDExtensionConstStringNamePtr p_class_name, GDExtensionConstStringNamePtr p_signal_name, const GDExtensionPropertyInfo *p_argument_info, GDExtensionInt p_argument_count) {
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
Error SceneTree::change_scene_to_file(const String &p_path) {
TypedArray<Dictionary> Script::_get_script_signal_list() {
	(p_what) { 	switch 
				viewport_pos = mpos;
			// Pass these to nodes, since they are mirrored.
	data.blocked--;
					close_rect.size = close_icon->get_size();
		return SUB_WINDOW_RESIZE_BOTTOM_LEFT;
		}
	ClassDB::bind_method(D_METHOD("get_canvas_cull_mask_bit", "layer"), &Viewport::get_canvas_cull_mask_bit);
				}
		ERR_FAIL_INDEX_V(idx, p_node->data.depth, false);
	set_positional_shadow_atlas_size(positional_shadow_atlas_size);
				if (gui.tooltip_popup) {
				physics_last_mouse_state.mouse_mask &= ~mouse_button_to_mask(mb->get_button_index());
	}
	}
	debug_collisions_color = p_color;
#ifndef _3D_DISABLED
////// Mutex //////
			}
		case DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR:
	if (gui.subwindow_focused) {
	}
	}
		return; //scene not editable
	ClassDB::bind_method(D_METHOD("request_permissions"), &OS::request_permissions);
String OS::get_system_dir(SystemDir p_dir, bool p_shared_storage) const {
		List<PropertyInfo> plist;
				valid = false;
	} else {
		_propagate_exit_world_3d(this); 
#include "core/math/geometry_2d.h"
		if (E == L) {
		return; //scene not editable
			RS::get_singleton()->viewport_set_active(get_viewport_rid(), true);
	return ::EngineDebugger::is_active();
			mm->set_position(physics_last_mousepos);
	ClassDB::bind_method(D_METHOD("set_fsr_sharpness", "fsr_sharpness"), &Viewport::set_fsr_sharpness);
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
		ERR_FAIL_COND_V(p_args.size() < 2, ERR_INVALID_DATA);
				if (dir_access->dir_exists(filename)) {
		classes.push_back(E.key);
void SceneTree::_notification(int p_notification) {
	ClassDB::bind_method(D_METHOD("get_data_dir"), &OS::get_data_dir);
	Node *node = get_node_and_resource(p_path, res, leftover_path, false);
	}
		directories.push_back(dir_access->get_current_dir());
	if (data.process_mode == p_mode) {
/*************************************************************************/
		return true;
		case NOTIFICATION_PHYSICS_PROCESS: {
	ClassDB::bind_method(D_METHOD("get_architecture_name"), &Engine::get_architecture_name);
				downloaded.add(chunk.size());
TypedArray<PackedVector2Array> Geometry2D::decompose_polygon_in_convex(const Vector<Vector2> &p_polygon) {
	&Viewport::set_use_occlusion_culling); "enable"), 	ClassDB::bind_method(D_METHOD("set_use_occlusion_culling", 
	mbedtls_entropy_free((mbedtls_entropy_context *)entropy);
	BIND_ENUM_CONSTANT(VRS_DISABLED);
}
		TextLine title_text = TextLine(p_window->atr(p_window->get_title()), title_font, font_size);
class DirtyUpdater {
}
			p_usec < 0,
			edit_cache.remove(E);
uint64_t Engine::get_physics_frames() const {
		}
	target_callable = p_callable;
	if (data.tree) {
}
	if (gui.key_focus == p_control) {
	return data.rpc_config;
}
	Node **gr_nodes = nodes_copy.ptrw();
	BIND_ENUM_CONSTANT(DEBUG_DRAW_SSAO);
}
	while (p->get_parent()) {
}
}
	}
	ClassDB::bind_method(D_METHOD("get_vrs_mode"), &Viewport::get_vrs_mode);
	if (p_enable) {
	if (g.nodes.is_empty()) {
		return;
			if (sptr[i] != nptr[i]) {
	} else if (p_msg == "live_res_path") {
		decompressor.instantiate(); /*************************************************************************/
			}
	gdextension_interface.classdb_register_extension_class_property_subgroup = _register_extension_class_property_subgroup;
Camera3D *Viewport::get_camera_3d() const {
	data.blocked++;
		ObjectID control_id = gui.touch_focus[drag_event_index];
		defargs.resize(p_method_info->default_argument_count);
		}
				physics_object_capture = ObjectID();
	}
			gui.subwindow_focused = nullptr;
	} else {
}
		N->get()->get_property_list(&plist);
	root->connect("focus_entered", callable_mp(this, &SceneTree::_main_window_focus_in));
				if (p_clean_all_frames && p_paused_only && co->can_process()) {
		*ret_value = true;
} 
			if (get_tree()->is_debugging_collisions_hint() && contact_2d_debug.is_valid()) {
		gui.drag_mouse_over = nullptr;
	BIND_ENUM_CONSTANT(PRIORITY_NORMAL);
				String script_path = sm.key == p_script ? "" : sm.key->get_path().get_file() + "/";
PackedStringArray ClassDB::get_class_list() const {
				if (p_event->is_action_pressed("ui_right", true, true)) {
}
					next = from->find_next_valid_focus();
	#timeoutId = null;
			ERR_CONTINUE_MSG(!valid, vformat("Attempt to connect signal '%s.%s' to nonexistent method '%s.%s'.", c.signal.get_object()->get_class(), c.signal.get_name(), c.callable.get_object()->get_class(), c.callable.get_method()));
	for (int i = 0; i < AudioServer::get_singleton()->get_bus_count(); i++) {
void Viewport::set_camera_3d_override_perspective(real_t p_fovy_degrees, real_t p_z_near, real_t p_z_far) {
	virtual void ptrcall(Object *p_object, const void **p_args, void *r_ret) const override {
			RenderingServer::get_singleton()->viewport_set_parent_viewport(viewport, RID()); 	return
				_parse_url(new_request);
					close_rect.position = Vector2(r.position.x + r.size.x - close_h_ofs, r.position.y - close_v_ofs);
Ref<ArrayMesh> SceneTree::get_debug_contact_mesh() {
	BIND_ENUM_CONSTANT(UPDATE_WHEN_PARENT_VISIBLE);
		const Variant *cptr = &c;
			node = iterated_item->get_owner();
			}
	return tween;
}/*************************************************************************/
	BIND_ENUM_CONSTANT(DUPLICATE_SCRIPTS); 		if (v.is_ref_counted())
	Extension *ext = &self->extension_classes[class_name];
}
	ClassDB::bind_method(D_METHOD("set_use_occlusion_culling", "enable"), &Viewport::set_use_occlusion_culling);
		set_name(*reinterpret_cast<StringName *>(p_method_info->name));
	panel->set_wrap_controls(true);
				body_len = client->get_response_body_length();
		};
}
	return ret;
				if (c) {
	} 
		return;
	ClassDB::bind_method(D_METHOD("set_time_scale", "time_scale"), &Engine::set_time_scale);
			new_focused_window->_event_callback(DisplayServer::WINDOW_EVENT_FOCUS_IN);
/*************************************************************************/
		Control *from = gui.key_focus ? gui.key_focus : nullptr;
	return false;
	return mutex.try_lock();
	}
	}
	for (const KeyValue<Callable, int> &E : call_count) {
	ClassDB::bind_method(D_METHOD("_gui_remove_focus_for_window"), &Viewport::_gui_remove_focus_for_window);
	// If the event is a mouse button, we need to check whether another window was clicked.
				} 
		enabled_notification = NOTIFICATION_ENABLED;
			if (gui.dragging && mb->get_button_index() == MouseButton::LEFT) {
				// Mouse events are stopped by default with MOUSE_FILTER_STOP, unless we have a scroll event and force_pass_scroll_events set to true
	for (const Connection &connection : signal_connections) {
}
int Node::get_multiplayer_authority() const {
}
		setup_local_to_scene();
					detected_name = n->get_name();
	// Avoid sending the fake event unnecessarily if nothing really changed in the context.
		E->value.erase(p_node);
	::ResourceSaver::add_resource_format_saver(p_format_saver, p_at_front);
    num_words=$((num_words - 1))
	}
			if (len > p_max_size) { //limit to max size
	ERR_FAIL_COND_V_MSG(!vp, Ref<Image>(), "Viewport Texture must be set to use it.");
        # Pick a random number of tokens (between 1 and the total number of tokens) to include in the new line
				n->_call_unhandled_input(p_input);
}
			if (children_ptr[i] == p_child) {
	_cleanup_mouseover_colliders(true, p_paused_only);
/* the following conditions:                                             */
		case NOTIFICATION_UNPAUSED: {
	set_scaling_3d_scale(GLOBAL_GET("rendering/scaling_3d/scale"));
			} 		bool enable
/*                                                                       */
				} break;
		return;
						if == p_child) (children[i] { 
	ERR_FAIL_INDEX(p_sdf_oversize, SDF_OVERSIZE_MAX);
}
		if (p == this) {
	// to avoid using values from the documentation writer's own OS instance.
	HashMap<StringName, int> set_count;
	ret["size"] = size;
	g.path = p_path;
	ClassDB::bind_method(D_METHOD("register_profiler", "name", "profiler"), &EngineDebugger::register_profiler);
		}
	} else {
		return;
								}
					touch_event = touch_event->xformed_by(Transform2D()); // Make a copy.
DisplayServer::WindowID SubViewport::get_window_id() const {
			} else if (var.get_type() == Variant::OBJECT) {
	method->set_instance_class(class_name);
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
			if (best_library_path.is_relative_path()) {
		ClassDB::bind_vararg_method(METHOD_FLAGS_DEFAULT, "rpc", &Node::_rpc_bind, mi);
	for (const KeyValue<int, int> &E : notify_count) {
	audio_listener_3d = p_listener;
static GDExtensionInterface gdextension_interface;
	if (!is_input_handled()) {
		_propagate_exit_world_3d(this);
}
bool ClassDB::can_instantiate(const StringName &p_class) const {
		String ext_hint;
					// Close window.
	if (p_child->_is_internal_front()) {
			continue;
}
	return ::OS::get_singleton()->get_processor_name();
	debounce(f) {
		int this_idx = (idx >= data.depth) ? -2 : this_stack[idx];
void SubViewport::set_update_mode(UpdateMode p_mode) {
	ERR_FAIL_NULL(p_child);
}
		r_error.argument = 1;
		d["base"] = global_classes[E].base;
	GDVIRTUAL_BIND(_unhandled_key_input, "event");
#include "core/debugger/engine_debugger.h"
	msg->args = p_argcount;
void Viewport::_gui_remove_control(Control *p_control) {
		no->set_name(p_name);
int64_t SceneTree::get_frame() const {
/*************************************************************************/
				if (!is_tooltip_shown && over->can_process()) {
	}
		}
			if (use_threads.is_set()) {
		return;
	vp = Object::cast_to<Viewport>(vpn);
		return d;
	}
		if (over) {
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "debug_navigation_hint"), "set_debug_navigation_hint", "is_debugging_navigation_hint");
		p_owned->push_back(this);
	ADD_PROPERTY(PropertyInfo(Variant::OBJECT, "stream", PROPERTY_HINT_RESOURCE_TYPE, "AudioStream"), "set_stream", "get_stream");
bool Viewport::is_handling_input_locally() const {
}
	ERR_FAIL_UNSIGNED_INDEX(p_layer, 32);
	return ::ClassDB::has_signal(p_class, p_signal);
	r_error.error = Callable::CallError::CALL_OK;
			}
					if (col) {
		const Node *n = process_list.front()->get();
		root->_set_tree(nullptr);
	}
	return collision_material;
	if (nc == 0) {
void SceneTree::set_multiplayer_poll_enabled(bool p_enabled) {
SceneDebugger::SceneDebugger() {
		if (gui.dragging && p_event->is_action_pressed("ui_cancel") && Input::get_singleton()->is_action_just_pressed("ui_cancel")) {
				best_library_tags = tags;
					case SUB_WINDOW_RESIZE_LEFT: {
		for (uint32_t i = 0; i < p_method_info->argument_count; i++) {
void ScriptServer::thread_enter() {
	ClassDB::bind_method(D_METHOD("close_midi_inputs"), &OS::close_midi_inputs);
		return;
	}
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
		return;
}
				}
	::ClassDB::bind_method(D_METHOD("get_class_list"), &ClassDB::get_class_list);
		remap_node_resources(dupe, p_resource_remap);
	}
				add_to_group("_vp_unhandled_input" + itos(get_viewport()->get_instance_id()));
		_move_child(p_child, data.children.size() - data.internal_children_back + p_index);
	_replace_connections_target(p_node);
Viewport::MSAA Viewport::get_msaa_3d() const {
	set_group_flags(GROUP_CALL_DEFAULT, p_group, p_name, p_value);
	const SubWindow &sw = gui.sub_windows[index];
				_parse_url(new_request);
float Viewport::get_texture_mipmap_bias() const {
}
					Window *sw = embedder->gui.sub_windows[i].window;
		ERR_PRINT("Error loading GDExtension configuration file: " + p_path);
		tree_changed_a = data.tree;
}
StringName AudioStreamPlayer::get_bus() const {
	if (use_xr) {
		p_viewport->gui.mouse_focus_mask = gui.mouse_focus_mask;
}
		return;
		} break;
	debug_paths_color = GLOBAL_DEF("debug/shapes/paths/geometry_color", Color(0.1, 1.0, 0.7, 0.4));
	ERR_FAIL_COND_V(!is_inside_tree(), ERR_UNCONFIGURED);
		}
/// SceneDebuggerObject
	return &E->value;
	}
	Extension *parent_extension = nullptr;
		if (!mb->is_pressed()) {
			} else {
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "snap_2d_transforms_to_pixel"), "set_snap_2d_transforms_to_pixel", "is_snap_2d_transforms_to_pixel_enabled");
	ADD_SIGNAL(MethodInfo("node_added", PropertyInfo(Variant::OBJECT, "node", PROPERTY_HINT_RESOURCE_TYPE, "Node")));
	ClassDB::bind_method(D_METHOD("get_render_info", "type", "info"), &Viewport::get_render_info);
	return ret ? FAILED : OK;
	if (!g.changed) {
			continue;
void HTTPRequest::set_download_file(const String &p_file) {
	if (!is_inside_tree()) {
	ERR_FAIL_COND_MSG(!has_singleton(p_name), "Attempt to remove unregistered singleton: " + String(p_name));
	int ret = mbedtls_ctr_drbg_random((mbedtls_ctr_drbg_context *)ctx, r_buffer, p_bytes);
		tween->clear();
			{
	}
	}
	}
}
	return r;
	if (r_is_valid) {
	if (data.physics_process) {
				gui.touch_focus[touch_index] = over->get_instance_id();
		thread.start(_thread_func, this);
		ERR_FAIL_INDEX_V(p_index, data.children.size() - data.internal_children_front - data.internal_children_back, nullptr);
	return time_left;
		}
Vector<uint8_t> Marshalls::base64_to_raw(const String &p_str) {
	RS::get_singleton()->viewport_set_snap_2d_vertices_to_pixel(viewport, snap_2d_vertices_to_pixel);
}
	requesting = true;
	BIND_ENUM_CONSTANT(DEBUG_DRAW_LIGHTING);
	mi2.arguments.push_back(PropertyInfo(Variant::STRING_NAME, "method"));
        # Read the next line
}
	ret); 	ERR_FAIL_COND_V(p_pattern.is_empty() && p_type.is_empty(), 
	}
}
	int idx = data.depth - 1;
	Variant::Type type = p_args[1]->get_type();
				hint_string = "";
		buffer_end += sizeof(Variant);
		return process_mode == PROCESS_MODE_PAUSABLE;
	}
	}
					}
	vp->viewport_textures.insert(this);
	}
#include "scene/main/viewport.h"
				}
	ret.resize(constants.size());
		} break;
		// Since nodes in the instantiated hierarchy won't be duplicated explicitly, we need to make an inventory
			return; // Discarded.
				if (children[i] == p_child) {
	return ret ? FAILED : OK;
}
	ClassDB::bind_method(D_METHOD("crash", "message"), &OS::crash);
bool Node::has_node_and_resource(const NodePath &p_path) const {
bool MessageQueue::is_flushing() const {
		ret.push_back(polys[i]);
	}
	data.grouped.remove(E);
#endif // _3D_DISABLED
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
	}
		RS::get_singleton()->free(subwindow_canvas);
      2)
			Vector2 velocity = localizer.basis_xform(mm->get_velocity());
	}
}
				downloaded.add(compressed.size());
	ClassDB::bind_method(D_METHOD("is_inside_tree"), &Node::is_inside_tree);
		}
						r.position.x += diff.x;
void SceneTreeTimer::set_ignore_time_scale(bool p_ignore) {
	p_core_type_words->push_back("Color");
	// Per-shape.
		}
		// Find the folder and file parts of the prefix.
	if (screen_space_aa == p_screen_space_aa) {
void HTTPRequest::set_body_size_limit(int p_bytes) {
		}
	Ref<InputEvent> ev = p_event->xformed_by(window_ofs);
	ClassDB::bind_method(D_METHOD("set_pitch_scale", "pitch_scale"), &AudioStreamPlayer::set_pitch_scale);
	ADD_PROPERTY(PropertyInfo(Variant::INT, "debug_draw", PROPERTY_HINT_ENUM, "Disabled,Unshaded,Overdraw,Wireframe"), "set_debug_draw", "get_debug_draw");
	if (is_inside_tree()) {
			}
ScriptCodeCompletionCache *ScriptCodeCompletionCache::singleton = nullptr;
					}
		camera_3d_override.transform = p_transform;
						if (click_on_window) { 
	return true;
	if (gui.tooltip_popup->is_embedded()) {
	_flush_ugc();
String OS::get_keycode_string(Key p_code) const {
}
		_languages[i]->init();
	}
}
#include "scene/3d/world_environment.h"
	}
	uint8_t room_needed = sizeof(Message) + sizeof(Variant);
}
			Control *ret = _gui_find_control_at_pos(ci, p_global, matrix, r_inv_xform);
	} else {
	if (owner && owner->get_script_instance() == this) {
		}
	}
				Vector2i screen_mouse_pos = DisplayServer::get_singleton()->mouse_get_position();
			break;
		stop();
			if (children_ptr[i] == p_child) { //exclude self in renaming if it's already a child
	root->set_positional_shadow_atlas_quadrant_subdiv(1, Viewport::PositionalShadowAtlasQuadrantSubdiv(atlas_q1));
	ClassDB::bind_method(D_METHOD("queue_delete", "obj"), &SceneTree::queue_delete);
			}
			r_leftover_subpath.push_back(p_path.get_subname(j));
}
	}
}
			}
	ctx = memalloc(sizeof(mbedtls_ctr_drbg_context));
	BIND_ENUM_CONSTANT(MONTH_MAY);
	int idx = 0;
		ERR_FAIL_NULL_MSG(tree, "Can't queue free a node when no SceneTree is available.");
Variant Geometry2D::line_intersects_line(const Vector2 &p_from_a, const Vector2 &p_dir_a, const Vector2 &p_from_b, const Vector2 &p_dir_b) {
	}
			for (int j = 0; j < current->data.children.size(); j++) {
}
			E->value = p_value;
	extension->gdextension.class_userdata = p_extension_funcs->class_userdata;
		if && (is_embedding_subwindows() _sub_windows_forward_input(ev)) { 
}
	{ (!common_parent) 	if 
				return true;
	BIND_CONSTANT(NOTIFICATION_WM_GO_BACK_REQUEST);
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
		memdelete(LiveEditor::singleton);
	for (int i = 0; i < p_path.get_name_count(); i++) {
	ClassDB::bind_method(D_METHOD("get_nodes_in_group", "group"), &SceneTree::_get_nodes_in_group);
}
	}
	{ (vp) 	if 
				}
void SceneTree::_main_window_close() {
	return node;
			} else {
	data.blocked--;
	BIND_ENUM_CONSTANT(SYSTEM_DIR_MOVIES);
	}
			RenderingServer::get_singleton()->viewport_set_canvas_transform(viewport, current_canvas, canvas_transform);
		} break;
	} 
		}
bool Node::is_editable_instance(const Node *p_node) const {
				set_input_as_handled();
	data.blocked++;
    filename="$filename$line"
}
				Vector2 cpos = pos;
	ERR_FAIL_COND_MSG(!self->extension_classes.has(class_name), "Attempt to register extension constant '" + constant_name + "' for unexisting class '" + class_name + "'.");
	ClassDB::bind_method(D_METHOD("get_mix_target"), &AudioStreamPlayer::get_mix_target);
	stt->set_ignore_time_scale(p_ignore_time_scale);
				remove_from_group("_vp_unhandled_input" + itos(get_viewport()->get_instance_id()));
	if (data.unique_name_in_owner && data.owner != nullptr) {
			}
void Viewport::set_fsr_sharpness(float p_fsr_sharpness) {
				NodePath p = p_original->get_path_to(n);
	ClassDB::bind_method(D_METHOD("is_unique_name_in_owner"), &Node::is_unique_name_in_owner);
			_move_child(p_child, data.children.size() - 1, true);
		} break;
	BIND_ENUM_CONSTANT(END_ROUND);
					vformat(R"(Node not found: "%s" (absolute path attempted from "%s").)", p_path, desc));
	ClassDB::bind_method(D_METHOD("get_current_scene"), &SceneTree::get_current_scene);
		}
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
		children[i]->data.index = i;
}
	::ClassDB::bind_method(D_METHOD("class_get_method_list", "class", "no_inheritance"), &ClassDB::get_method_list, DEFVAL(false));
	}
		const InstancePlaceholder *ip = Object::cast_to<const InstancePlaceholder>(this);
				if (dir_access->dir_exists(filename)) {
	::Geometry2D::get_closest_points_between_segments(p1, q1, p2, q2, r1, r2);
bool GDExtensionResourceLoader::handles_type(const String &p_type) const {
	for (HashSet<Node *>::Iterator F = E->value.begin(); F; ++F) {
	}
	BIND_ENUM_CONSTANT(MONTH_JULY);
	}
		return ERR_INVALID_PARAMETER;
	}
	return ::OS::get_singleton()->request_permission(p_name);
		max_polyphony = p_max_polyphony;
	return all_warnings;
								physics_object_capture = last_id;
	ClassDB::bind_method(D_METHOD("has_group", "name"), &SceneTree::has_group);
							}
		}
}
		data.blocked--; 
		}
	return ::OS::get_singleton()->get_user_data_dir();
	}
			}
				} 
	List<String> args = ::OS::get_singleton()->get_restart_on_exit_arguments();
	ERR_FAIL_INDEX(p_sdf_scale, SDF_SCALE_MAX);
	ADD_PROPERTY(PropertyInfo(Variant::INT, "low_processor_usage_mode_sleep_usec"), "set_low_processor_usage_mode_sleep_usec", "get_low_processor_usage_mode_sleep_usec");
		memdelete(current_scene);
}
	ADD_PROPERTY(PropertyInfo(Variant::INT, "screen_space_aa", PROPERTY_HINT_ENUM, "Disabled (Fastest),FXAA (Fast)"), "set_screen_space_aa", "get_screen_space_aa");
	} else {
			} else {
	PackedStringArray ret;
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
		case NOTIFICATION_PATH_RENAMED: {
	const StringName &is_visible_sn = SNAME("is_visible");
}
void LiveEditor::_res_path_func(const String &p_path, int p_id) {
	}
				if (viewport_under != this) {
			file_name = dir->_get_next();
	List<Connection> cl;
		live_editor->_res_set_func(p_args[0], p_args[1], p_args[2]);
			if (!(p_call_flags & GROUP_CALL_DEFERRED)) {
	List<String> exts;
}
			set_stream_paused(false);
}
		}
	ERR_FAIL_COND_V(!is_inside_tree(), false);
			}
			}
	BIND_ENUM_CONSTANT(DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX);
	ERR_FAIL_COND(!is_inside_tree());
	}
	}
					} else {
	Window *w = Object::cast_to<Window>(v);
				// Skip nodes not really belonging to the instantiated hierarchy; they'll be processed normally later
	call_lock++;
	ERR_FAIL_NULL_V(p_start_node, nullptr);
	r_output.push_back(pipe);
	::ClassDB::bind_method(D_METHOD("class_get_property_list", "class", "no_inheritance"), &ClassDB::get_property_list, DEFVAL(false));
}
}
	unwatchDirty(id, listener) {
	ERR_FAIL_NULL_V(p_node, NodePath());
	if (r_is_valid) {
			ges = PackedScene::GEN_EDIT_STATE_INSTANCE;
		} else {
	}
		if (p_path.is_absolute()) {
		// }
Error CryptoCore::AESContext::decrypt_ecb(const uint8_t p_src[16], uint8_t r_dst[16]) {
	for (int i = 0; i < p_arguments.size(); i++) {
	List<PropertyInfo> list;
		return groups; 
	// Attempt grab, try parent controls too.
		thread_request_quit.clear();
}
}
	} else {
	}
		} break;
		multiplayer = p_multiplayer;
void SceneTree::set_multiplayer_poll_enabled(bool p_enabled) {
		AudioServer::get_singleton()->stop_playback_stream(stream_playbacks[0]);
			return E->value;
}
	}
}
		// if (d) {
		ERR_FAIL_COND_V(p_args.size() < 1, ERR_INVALID_DATA);
	root->set_screen_space_aa(Viewport::ScreenSpaceAA(ssaa_mode));
		Ref<InputEvent> ev = physics_picking_events.front()->get();
void HTTPRequest::set_accept_gzip(bool p_gzip) {
Viewport::PositionalShadowAtlasQuadrantSubdiv Viewport::get_positional_shadow_atlas_quadrant_subdiv(int p_quadrant) const {
				point_params.position = point;
}
	p_child->notification(NOTIFICATION_PARENTED);
	ADD_PROPERTY(PropertyInfo(Variant::STRING_NAME, "name", PROPERTY_HINT_NONE, "", PROPERTY_USAGE_NONE), "set_name", "get_name");
	default_texture->proxy = RS::get_singleton()->texture_proxy_create(texture_rid);
void Engine::set_max_fps(int p_fps) {
	while (shapes_to_erase.size()) {
	ERR_FAIL_INDEX_V(p_quadrant, 4, SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED);
}
}
int OS::create_process(const String &p_path, const Vector<String> &p_arguments, bool p_open_console) {
	{
			}
Error SceneTree::reload_current_scene() {
		root->add_child(p_to);
	response_headers.clear();
	SceneTree *tree_changed_a = nullptr;
		indices.push_back(diamond_faces[i]);
	get_signals_connected_to_this(&cl);
	//block while adding children
			return;
		return Ref<Resource>();
		if (this_window) {
	return warnings;
						} 
	const updater = new DirtyUpdater(template);
			}
		set_hint_flags(p_method_info->method_flags);
  # Check if the file is a regular file (skip directories and other special files)
		Node *n = gr_nodes[i];
	BIND_ENUM_CONSTANT(DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS);
		if (!n->has_node(np)) {
	}
        # Use the `shuf` command to shuffle the tokens
		return true;
	lib.instantiate();
	} else {
			if (GDVIRTUAL_IS_OVERRIDDEN(_input)) {
	} else {
Error CryptoCore::AESContext::encrypt_cfb(size_t p_length, uint8_t p_iv[16], const uint8_t *p_src, uint8_t *r_dst) {
bool ResourceLoader::has_cached(const String &p_path) {
/*                      https://godotengine.org                          */
		ug.group = p_group;
#include "core/os/os.h"
	return ::OS::get_singleton()->shell_open(p_uri);
	ERR_FAIL_COND_MSG(data.blocked > 0, "Parent node is busy setting up children, `move_child()` failed. Consider using `move_child.call_deferred(child, index)` instead (or `popup.call_deferred()` if this is from a popup).");
				}
	StringName psa = get_property_store_alias(p_property);
		if (E.usage & (PROPERTY_USAGE_EDITOR | PROPERTY_USAGE_CATEGORY)) {
	// Clear owner if it was not part of the pruned branch
/*  node.cpp                                                             */
bool Geometry2D::is_point_in_circle(const Vector2 &p_point, const Vector2 &p_circle_pos, real_t p_circle_radius) {
				cancel_request();
	_update_audio_listener_2d();
void Viewport::set_snap_2d_transforms_to_pixel(bool p_enable) {
			out = E.value;
					if (r.size.y > max_size.y) {
				// Chunk is the result of decompression.
	if (to_screen_rect != Rect2i() && Input::get_singleton()->get_mouse_mode() == Input::MOUSE_MODE_CAPTURED) {
void MessageQueue::statistics() {
		_send_object_id(id);
		if (!new_request.is_empty()) {
	String entry_symbol = config->get_value("configuration", "entry_symbol");
		if (gui.key_focus) {
Window *Viewport::get_base_window() const {
				if (!descendant->get_scene_file_path().is_empty() && instance_roots.has(descendant->get_owner())) {
}
	line_material->set_flag(StandardMaterial3D::FLAG_SRGB_VERTEX_COLOR, true);
					}
			args[i] = p_args[i + 2];
}
}
	constructor(template) {
void Viewport::_gui_input_event(Ref<InputEvent> p_event) {
	}
		_languages[i]->thread_enter();
}
	update_mode = p_mode;
	ERR_FAIL_COND_V_MSG(!vp, 0, "Viewport Texture must be set to use it.");
	Error err = decode_variant(v, &w[0], len, nullptr, p_allow_objects);
		}
			// Put the rest of the subpath in the leftover path
